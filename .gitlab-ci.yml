image: artifactory.quanti.cz/docker/mysql-ssh

include:
  - project: 'humansis/gitlab-ci-templates'
    ref: 'slack'
    file: '.slack-template.yml'

variables:
  CHANNEL: "#pin_deployment"
  USERNAME: "PIN Deploy"
  IMAGE_NAME: humansis-php
  NGINX_IMAGE_NAME: humansis-nginx
  REPOSITORY_NAME: pin-docker-local
  REPOSITORY_URL: ${ARTIFACTORY_URL}

stages:
  - static_analysis
  - test
  - backup_db
  - backup_code
  - deploy_dev
  - deploy_test
  - deploy_test_new
  - deploy_stage
  - deploy_demo
  - deploy_prod
  - upload_db

.prepare_ssh: &prepare_ssh
  before_script:
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -p 22 ${HOSTNAME} >> ~/.ssh/known_hosts
    - >-
      cat <<EOF > ~/.ssh/config

      Host ${HOSTNAME}
        PasswordAuthentication no
        PreferredAuthentications publickey
      EOF

.prepare_ssh_aws: &prepare_ssh_aws
  before_script:
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - aws configure set aws_access_key_id ${deploy_aws_access_key_id}
    - aws configure set aws_secret_access_key ${deploy_aws_secret_access_key}
    - aws configure set default.region eu-central-1

.remove_key: &remove_key
  after_script:
    - rm -rf ~/.ssh/id_rsa

test:
  stage: test
  image: artifactory.quanti.cz/docker/pin-php-test
  services:
    - name: mysql:8.0.21
      alias: db
      command: ["--default-authentication-plugin=mysql_native_password", "--log-bin-trust-function-creators=ON"]
  variables:
    SYMFONY_VERSION: "4.4.*"
    DB: db_test
    MYSQL_ROOT_PASSWORD: "root"
    GELF_SERVER_NAME: "test"
    GELF_HOST: 10.0.0.1
    GELF_PORT: 10001
  before_script:
    - sudo composer self-update --1
    - cp app/config/parameters.yml.test app/config/parameters.yml
    - composer install
    - php bin/console doctrine:database:create --env=test || true
    - php bin/console doctrine:migrations:migrate -n --env=test
    - php bin/console doctrine:fixtures:load -n --env=dev
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  script:
    - ./vendor/bin/phpunit
  except:
    - tags
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - vendor/

backup-db:
  stage: backup_db
  variables:
    RDS_HOSTNAME: ${RDS_HOSTNAME_PROD}
  script:
    - mysqldump --quick --skip-lock-tables --single-transaction --set-gtid-purged=OFF -h ${RDS_HOSTNAME} -u ${RDS_USERNAME_PROD} -p"${RDS_PASSWORD_PROD}" ${RDS_DB_NAME_PROD} | pv > db.sql
    - export DB_NAME=backup_$(date '+%Y_%m_%d')_${CI_PIPELINE_ID}
    - sed -i -e 's/DEFINER[ ]=[ ][^*]**/*/' db.sql
    - mysql -h ${RDS_HOSTNAME} -u ${RDS_USERNAME_PROD} -p"${RDS_PASSWORD_PROD}" -e "CREATE DATABASE ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
    - pv --bytes --eta --progress db.sql | mysql -h ${RDS_HOSTNAME} -u ${RDS_USERNAME_PROD} -p"${RDS_PASSWORD_PROD}" ${DB_NAME}
  after_script:
    - rm db.sql
  only:
    - tags
  when: manual

aws-db-snapshot:
  stage: backup_db
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    AWS_ACCESS_KEY_ID: ${aws_backup_db_access_key_id}
    AWS_SECRET_ACCESS_KEY: ${aws_backup_db_secret_access_key}
    AWS_DEFAULT_REGION: eu-central-1
    RDS_INSTANCE: ${RDS_INSTANCE_PROD}
  script:
    - export SNAPSHOT_NAME=backup-$(date '+%Y-%m-%d')-${CI_PIPELINE_ID}
    - aws rds create-db-snapshot --db-instance-identifier ${RDS_INSTANCE} --db-snapshot-identifier ${SNAPSHOT_NAME}
    - aws rds wait db-snapshot-completed --db-snapshot-identifier ${SNAPSHOT_NAME}
  only:
    - tags

backup-code:
  stage: backup_code
  variables:
    HOSTNAME: api.humansis.org
  <<: *prepare_ssh
  script:
    - ssh ubuntu@${HOSTNAME} "cd /var/www/html/; tar czf backup_$(date '+%Y-%m-%d').tar.gz --exclude=bms_api/var/logs bms_api/"
  <<: *remove_key
  only:
    - tags

deploy dev:
  stage: deploy_dev
  image: artifactory.quanti.cz/docker-local/alpine-ssh-git:dind
  environment:
    name: dev
    url: https://apidev.humansis.org
  variables:
    HOSTNAME: apidev.humansis.org
    ENVIRONMENT: dev
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: dev
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh_aws
  script:
    - ./slackScripts/slack_started.sh
    - ./build-docker.sh
    - ./upload-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./deploy-new.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  <<: *remove_key
  only:
    - branches
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  when: manual
  tags:
    - dind

deploy test:
  stage: deploy_test
  image: artifactory.quanti.cz/docker-local/alpine-ssh-git:dind
  environment:
    name: test-new
    url: https://api-test.humansis.org
  variables:
    HOSTNAME: api-test.humansis.org
    ENVIRONMENT: test
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh_aws
  script:
    - ./slackScripts/slack_started.sh
    - ./build-docker.sh
    - ./upload-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./deploy-new.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  <<: *remove_key
  only:
    - /^develop$/
  except:
    - tags
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  when: manual
  tags:
    - dind

deploy test clean:
  stage: deploy_test
  image: artifactory.quanti.cz/docker-local/alpine-ssh-git:dind
  environment:
    name: test-new
    url: https://api-test.humansis.org
  variables:
    HOSTNAME: api-test.humansis.org
    ENVIRONMENT: test
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: "test"
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh_aws
  script:
    - ./slackScripts/slack_started.sh
    - ./build-docker.sh
    - ./upload-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./deploy-new.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  <<: *remove_key
  only:
    - /^develop$/
  except:
    - tags
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  when: manual
  tags:
    - dind

deploy stage:
  stage: deploy_stage
  image: artifactory.quanti.cz/docker-local/alpine-ssh-git:dind
  environment:
    name: stage
    url: https://apistage.humansis.org
  variables:
    HOSTNAME: apistage.humansis.org
    ENVIRONMENT: stage
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh_aws
  script:
    - ./slackScripts/slack_started.sh
    - ./build-docker.sh
    - ./upload-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./deploy-new.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  <<: *remove_key
  only:
    - /^release\/.*$/
  except:
    - tags
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  tags:
    - dind

deploy demo:
  stage: deploy_demo
  image: artifactory.quanti.cz/docker-local/alpine-ssh-git:dind
  environment:
    name: demo
    url: https://apidemo.humansis.org
  variables:
    HOSTNAME: apidemo.humansis.org
    ENVIRONMENT: demo
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: "test"
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh_aws
  script:
    - ./slackScripts/slack_started.sh
    - ./build-docker.sh
    - ./upload-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./deploy-new.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  <<: *remove_key
  only:
    - /^release\/.*$/
    - /^v.*$/
  when: manual
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  tags:
    - dind

deploy prod:
  stage: deploy_prod
  environment:
    name: production
    url: https://api.humansis.org
  variables:
    HOSTNAME: api.humansis.org
    ENVIRONMENT: prod
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  <<: *prepare_ssh
  script:
    - ./slackScripts/slack_started.sh
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
    - ./deploy.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
  <<: *remove_key
  only:
    - /^v.*$/
  except:
    - branches
  when: manual
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        ./slackScripts/slack_successful.sh
      else
        ./slackScripts/slack_failed.sh
      fi
  allow_failure: false

deploy prod db to stage:
  stage: upload_db
  image: artifactory.quanti.cz/docker/mysql-ssh-awscli
  variables:
    HOSTNAME: apistage.humansis.org
    DATABASE_NAME: proddb
  <<: *prepare_ssh_aws
  script:
    - mysqldump --quick --skip-lock-tables --single-transaction --set-gtid-purged=OFF -h ${RDS_HOSTNAME_PROD} -u ${RDS_USERNAME_PROD} -p"${RDS_PASSWORD_PROD}" ${RDS_DB_NAME_PROD} | pv > db.sql
    - mysql -h ${RDS_HOSTNAME_STAGE} -u ${RDS_USERNAME_STAGE} -p"${RDS_PASSWORD_STAGE}" -e "DROP DATABASE ${DATABASE_NAME}"
    - sed -i -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' db.sql
    - mysql -h ${RDS_HOSTNAME_STAGE} -u ${RDS_USERNAME_STAGE} -p"${RDS_PASSWORD_STAGE}" -e "CREATE DATABASE ${DATABASE_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
    - pv --bytes --eta --progress db.sql | mysql -h ${RDS_HOSTNAME_STAGE} -u ${RDS_USERNAME_STAGE} -p"${RDS_PASSWORD_STAGE}" ${DATABASE_NAME}
    - ./change_stage_db.sh
  after_script:
    - rm db.sql
    - rm -rf ~/.ssh/id_rsa
  only:
    - /^release\/.*$/
    - vs/fix-db-upload
  except:
    - tags
  when: manual

static_analysis:
  image: php:7.4-fpm
  stage: static_analysis
  script:
    - apt-get update
    - apt install -y curl git unzip
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - php /usr/local/bin/composer install -o --ignore-platform-reqs --no-scripts
    - php -d memory_limit=-1 vendor/bin/phpstan analyse -l 1 src/
