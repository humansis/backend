image: artifactory.quanti.cz/docker/mysql-ssh

variables:
  CHANNEL: "#pin_deployment"
  USERNAME: "PIN Deploy"
  IMAGE_NAME: humansis-php
  NGINX_IMAGE_NAME: humansis-nginx
  REPOSITORY_NAME: pin-docker-local
  REPOSITORY_URL: ${ARTIFACTORY_URL}

stages:
  - static_analysis
  - code_analysis
  - test
  - upload_crowdin
  - backup_db
  - deploy_dev
  - deploy_test
  - deploy_stage
  - deploy_demo
  - deploy_prod
  - badge
  - upload_db

.prepare_ssh_aws: &prepare_ssh_aws
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - aws configure set aws_access_key_id ${deploy_aws_access_key_id}
    - aws configure set aws_secret_access_key ${deploy_aws_secret_access_key}
    - aws configure set default.region eu-central-1

.deploy:
  image: artifactory.quanti.cz/docker/alpine-ssh-git:dind-buildx
  before_script: *prepare_ssh_aws
  script:
    - ./ci/build-docker.sh ${ARTIFACTORY_USER} ${ARTIFACTORY_PASS}
    - ./ci/report-slack.sh start ${ENVIRONMENT}
    - ./ci/deploy-docker.sh ${ENVIRONMENT} ${CLEAN_DATABASE} ${LOAD_FIXTURES} ${CACHE_CLEAR_MODE}
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
  after_script:
    - rm -rf ~/.ssh/id_rsa
    - ./ci/report-slack.sh ${CI_JOB_STATUS} ${ENVIRONMENT}
  tags:
    - dind

.test-setup:
  image: artifactory.quanti.cz/docker/pin-php-test:8.1
  services:
    - name: mysql:8.0.21
      alias: db
      command: ["--default-authentication-plugin=mysql_native_password", "--log-bin-trust-function-creators=ON"]
  variables:
    SYMFONY_VERSION: "4.4.*"
    DB: db_test
    MYSQL_ROOT_PASSWORD: "root"
    GELF_SERVER_NAME: "test"
    GELF_HOST: 10.0.0.1
    GELF_PORT: 10001
    ENVIRONMENT: unittest
  before_script:
    - sudo composer self-update
    - cp app/config/parameters.yml.test app/config/parameters.yml
    - composer install
  except:
    - tags
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - vendor/

static_analysis:
  image: php:8.1-fpm
  stage: static_analysis
  script:
    - apt-get update
    - apt install -y curl git unzip
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - php /usr/local/bin/composer install -o --ignore-platform-reqs --no-scripts
    - php -d memory_limit=-1 vendor/bin/phpstan analyse -l 1 src/

code_analysis:
  image: php:8.1-fpm
  stage: code_analysis
  script:
  - apt-get update
  - apt install -y curl git unzip
  - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  - php /usr/local/bin/composer install -o --ignore-platform-reqs --no-scripts
  - php vendor/bin/phpcs --config-set show_warnings 0
  - php -d memory_limit=-1 vendor/bin/phpcs -p --standard=psr12 src/ tests/

test:
  stage: test
  extends: .test-setup
  script:
    - php bin/console doctrine:database:create --env=test || true
    - php bin/console doctrine:migrations:migrate -n --env=test
    - php bin/console doctrine:fixtures:load -n --env=dev
    - echo "Current import batch size is $IMPORT_BATCH_SIZE"
    - php -d memory_limit=-1 ./vendor/bin/phpunit

upload crowdin:
  stage: upload_crowdin
  extends: .test-setup
  script:
    - php bin/console translation:extract --force en
    - php bin/console crowdin:push
  only:
    - develop

aws-db-snapshot:
  stage: backup_db
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    AWS_ACCESS_KEY_ID: ${aws_backup_db_access_key_id}
    AWS_SECRET_ACCESS_KEY: ${aws_backup_db_secret_access_key}
    AWS_DEFAULT_REGION: eu-central-1
    RDS_INSTANCE: ${RDS_INSTANCE_PROD}
  script:
    - export SNAPSHOT_NAME=backup-$(date '+%Y-%m-%d')-${CI_PIPELINE_ID}
    - aws rds create-db-snapshot --db-instance-identifier ${RDS_INSTANCE} --db-snapshot-identifier ${SNAPSHOT_NAME}
    - aws rds wait db-snapshot-completed --db-snapshot-identifier ${SNAPSHOT_NAME}
  only:
    - tags

deploy dev1:
  stage: deploy_dev
  environment:
    name: dev1
    url: https://apidev1.humansis.org
  variables:
    ENVIRONMENT: dev1
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: dev
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy dev2 - clean db:
  stage: deploy_dev
  environment:
    name: dev2
    url: https://apidev2.humansis.org
  variables:
    ENVIRONMENT: dev2
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: dev
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy dev2 - keep db:
  stage: deploy_dev
  environment:
    name: dev2
    url: https://apidev2.humansis.org
  variables:
    ENVIRONMENT: dev2
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy dev3 - keep db:
  stage: deploy_test
  environment:
    name: dev3
    url: https://apidev3.humansis.org
  variables:
    ENVIRONMENT: dev3
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy dev3 - clean fixtures:
  stage: deploy_test
  environment:
    name: dev3
    url: https://apidev3.humansis.org
  variables:
    ENVIRONMENT: dev3
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: "test"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy arm:
  stage: deploy_dev
  environment:
    name: arm
    url: https://apiarm.humansis.org
  variables:
    ENVIRONMENT: arm
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: dev
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy test - keep db:
  stage: deploy_test
  environment:
    name: test
    url: https://apitest.humansis.org
  variables:
    ENVIRONMENT: test
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy test - clean fixtures:
  stage: deploy_test
  image: artifactory.quanti.cz/docker/alpine-ssh-git:dind
  environment:
    name: test
    url: https://apitest.humansis.org
  variables:
    ENVIRONMENT: test
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: "test"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy test - anonymized db:
  stage: deploy_test
  image: artifactory.quanti.cz/docker/alpine-ssh-git:dind
  environment:
    name: test
    url: https://apitest.humansis.org
  variables:
    ENVIRONMENT: test
    CLEAN_DATABASE: "database"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  when: manual

deploy stage:
  stage: deploy_stage
  environment:
    name: stage
    url: https://apistage.humansis.org
  variables:
    ENVIRONMENT: stage
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  only:
    - /^release\/.*$/
  except:
    - tags

deploy demo  - clean fixtures:
  stage: deploy_demo
  environment:
    name: demo
    url: https://apidemo.humansis.org
  variables:
    ENVIRONMENT: demo
    CLEAN_DATABASE: "true"
    LOAD_FIXTURES: "test"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  only:
    - /^release\/.*$/
    - /^v.*$/
  when: manual

deploy demo  - keep db:
  stage: deploy_demo
  environment:
    name: demo
    url: https://apidemo.humansis.org
  variables:
    ENVIRONMENT: demo
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  only:
    - /^release\/.*$/
    - /^v.*$/
  when: manual

deploy demo - anonymized db:
  stage: deploy_demo
  image: artifactory.quanti.cz/docker/alpine-ssh-git:dind
  environment:
    name: demo
    url: https://apidemo.humansis.org
  variables:
    ENVIRONMENT: demo
    CLEAN_DATABASE: "database"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  only:
    - /^release\/.*$/
    - /^v.*$/
  when: manual


deploy prod:
  stage: deploy_prod
  environment:
    name: production
    url: https://api.humansis.org
  variables:
    ENVIRONMENT: production
    CLEAN_DATABASE: "false"
    LOAD_FIXTURES: "false"
    CACHE_CLEAR_MODE: aggressive
  extends: .deploy
  only:
    - /^v.*$/
  except:
    - branches
  when: manual
  allow_failure: false

make badge:
  stage: badge
  image: artifactory.quanti.cz/docker-local/alpine-jq-curl
  script:
    - version=$(echo $CI_COMMIT_TAG | tr -d 'v')
    - version_badge_id=$(curl --header "PRIVATE-TOKEN:${BADGE_API_TOKEN}" https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/badges | jq -c 'map(select(.name | contains("version")))[0].id')
    - curl --request PUT --header "PRIVATE-TOKEN:${BADGE_API_TOKEN}" --data "image_url=https://img.shields.io/badge/version-${version}-blue" https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/badges/${version_badge_id}
  only:
    - /^v.*$/
  except:
    - branches

deploy prod db to stage:
  stage: upload_db
  image: artifactory.quanti.cz/docker/mysql-ssh-awscli:8.0
  variables:
    HOSTNAME: apistage.humansis.org
    DATABASE_NAME: proddb
  before_script: *prepare_ssh_aws
  script:
    - mysqldump --quick --skip-lock-tables --routines --single-transaction --no-tablespaces --set-gtid-purged=OFF -h ${DUMP_DB_HOSTNAME} -u ${DUMP_USER} -p"${DUMP_USER_PW}" ${DUMP_DB_NAME} > db.sql
    - mysql -h ${UPLOAD_DB_HOSTNAME} -u ${DB_DEPLOY_USER} -p"${DB_DEPLOY_USER_PASSWORD}" -e "DROP DATABASE ${DATABASE_NAME}"
    - sed -i -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' -e 's/DEFINER[ ]*=[ ]*[^*]*PROCEDURE/PROCEDURE/' -e 's/DEFINER[ ]*=[ ]*[^*]*FUNCTION/FUNCTION/' db.sql
    - mysql -h ${UPLOAD_DB_HOSTNAME} -u ${DB_DEPLOY_USER} -p"${DB_DEPLOY_USER_PASSWORD}" -e "CREATE DATABASE ${DATABASE_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
    - mysql -h ${UPLOAD_DB_HOSTNAME} -u ${DB_DEPLOY_USER} -p"${DB_DEPLOY_USER_PASSWORD}" ${DATABASE_NAME} < db.sql
    - ./ci/change-stage-db.sh
  after_script:
    - rm db.sql
    - rm -rf ~/.ssh/id_rsa
  only:
    - /^release\/.*$/
    - /^vs\/.*$/
  except:
    - tags
  when: manual
