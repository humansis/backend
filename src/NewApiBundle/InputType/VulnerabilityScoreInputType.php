<?php
declare(strict_types=1);

namespace NewApiBundle\InputType;

use Symfony\Component\Validator\Constraints as Assert;

/**
 * @Assert\GroupSequence({"VulnerabilityScoreInputType", "Strict"})
 */
final class VulnerabilityScoreInputType
{
    /**
     * @var array
     *
     * @Assert\Type("array")
     * @Assert\NotBlank()
     * @Assert\All(
     *     constraints={
     *         @Assert\Type("integer", groups={"Strict"}),
     *     },
     *     groups={"Strict"}
     * )
     */
    private $beneficiaryIds;

    /**?int
     * @var string
     *
     * @Assert\NotNull
     * @Assert\Choice(callback={"ProjectBundle\DBAL\SectorEnum", "values"})
     */
    private $sector;

    //TODO checkovat, jestli obsahuje hodnoty z enumu
    /**
     * @var string
     * @Assert\NotNull
     */
    private $scoringType;

    /**
     * @var integer|null
     *
     * @Assert\Type("integer", groups={"Strict"})
     */
    private $threshold = null;

    /**
     * @return string
     */
    public function getSector()
    {
        return $this->sector;
    }

    /**
     * @param string $sector
     */
    public function setSector($sector): void
    {
        $this->sector = $sector;
    }

    /**
     * @return string
     */
    public function getScoringType()
    {
        return $this->scoringType;
    }

    /**
     * @param string $scoringType
     */
    public function setScoringType($scoringType): void
    {
        $this->scoringType = $scoringType;
    }

    /**
     * @return array
     */
    public function getBeneficiaryIds()
    {
        return $this->beneficiaryIds;
    }

    /**
     * @param array $beneficiaryIds
     */
    public function setBeneficiaryIds($beneficiaryIds): void
    {
        $this->beneficiaryIds = $beneficiaryIds;
    }

    /**
     * @return int|null
     */
    public function getThreshold()
    {
        return $this->threshold;
    }

    /**
     * @param int|null $threshold
     */
    public function setThreshold($threshold): void
    {
        $this->threshold = $threshold;
    }
}
