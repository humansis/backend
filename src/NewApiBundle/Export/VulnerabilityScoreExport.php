<?php
declare(strict_types=1);

namespace NewApiBundle\Export;

use BeneficiaryBundle\Model\Vulnerability\CategoryEnum;
use CommonBundle\Utils\ExportService;
use DistributionBundle\Entity\Assistance;
use DistributionBundle\Entity\AssistanceBeneficiary;
use DistributionBundle\Enum\AssistanceTargetType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

class VulnerabilityScoreExport
{
    /** @var ExportService */
    private $csvExportService;

    /** @var TranslatorInterface */
    private $translator;

    /** @var EntityManagerInterface */
    private $em;

    public function __construct(ExportService $exportService, TranslatorInterface $translator, EntityManagerInterface $em)
    {
        $this->csvExportService = $exportService;
        $this->translator = $translator;
        $this->em = $em;
    }

    public function export(Assistance $assistance, string $type): ?string
    {
        /** @var AssistanceBeneficiary[] $assistanceBeneficiaries */
        $assistanceBeneficiaries = $this->em->getRepository(AssistanceBeneficiary::class)->findByAssistance($assistance);

        $exportableTable = [];
        foreach ($assistanceBeneficiaries as $db) {
            /** @var \BeneficiaryBundle\Entity\Beneficiary $beneficiary */
            $beneficiary = $db->getBeneficiary();

            $exportableRow = [];
            if (AssistanceTargetType::HOUSEHOLD === $assistance->getTargetType()) {
                $exportableRow = [$this->translator->trans('Household ID') => $beneficiary->getHousehold()->getId()];
            } elseif (AssistanceTargetType::INDIVIDUAL === $assistance->getTargetType()) {
                $exportableRow = [$this->translator->trans('Beneficiary ID') => $beneficiary->getId()];
            } else {
                continue;
            }

            $exportableRow[$this->translator->trans('First Name')] = $beneficiary->getPerson()->getLocalGivenName();
            $exportableRow[$this->translator->trans('Family Name')] = $beneficiary->getPerson()->getLocalFamilyName();

            /** @var string $scores */
            $scores = $db->getVulnerabilityScores();
            if (!$scores) {
                continue;
            }

            $scores = json_decode($scores, true);

            $exportableRow[$this->translator->trans('Assets')] = $scores[CategoryEnum::ASSETS];
            $exportableRow[$this->translator->trans('Assistance')] = $scores[CategoryEnum::ASSISTANCE];
            $exportableRow[$this->translator->trans('CSI')] = $scores[CategoryEnum::CSI];
            $exportableRow[$this->translator->trans('Debt')] = $scores[CategoryEnum::DEBT];
            $exportableRow[$this->translator->trans('Dependency Ration')] = $scores[CategoryEnum::DEPENDENCY_RATIO];
            $exportableRow[$this->translator->trans('Displacement Status')] = $scores[CategoryEnum::DISPLACEMENT_STATUS];
            $exportableRow[$this->translator->trans('FCS')] = $scores[CategoryEnum::FCS];
            $exportableRow[$this->translator->trans('Head Gender')] = $scores[CategoryEnum::HHH_GENDER];
            $exportableRow[$this->translator->trans('Head Vulnerability')] = $scores[CategoryEnum::HHH_VULNERABILITY];
            $exportableRow[$this->translator->trans('Members Vulnerability')] = $scores[CategoryEnum::HHM_VULNERABILITY];
            $exportableRow[$this->translator->trans('Income Spent On Food')] = $scores[CategoryEnum::INCOME_FOOD];
            $exportableRow[$this->translator->trans('Income Per Member')] = $scores[CategoryEnum::INCOME_HHM];
            $exportableRow[$this->translator->trans('Residence Ownership')] = $scores[CategoryEnum::RESIDENCE_OWNERSHIP];
            $exportableRow[$this->translator->trans('Settlement')] = $scores[CategoryEnum::SETTLEMENT];
            $exportableRow[$this->translator->trans('Shelter')] = $scores[CategoryEnum::SHELTER];
            $exportableRow[$this->translator->trans('Total Score')] = $scores['totalScore'];

            $exportableTable[] = $exportableRow;
        }

        try {
            return $this->csvExportService->export($exportableTable, 'vulnerabilities', $type);
        } catch (\InvalidArgumentException $ex) {
            return null;
        }
    }
}
