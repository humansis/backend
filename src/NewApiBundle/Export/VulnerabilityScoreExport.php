<?php
declare(strict_types=1);

namespace NewApiBundle\Export;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Model\Vulnerability\CategoryEnum;
use BeneficiaryBundle\Repository\BeneficiaryRepository;
use CommonBundle\Utils\ExportService;
use DistributionBundle\Entity\Assistance;
use DistributionBundle\Entity\AssistanceBeneficiary;
use DistributionBundle\Enum\AssistanceTargetType;
use DistributionBundle\Repository\AssistanceBeneficiaryRepository;
use Doctrine\ORM\EntityManagerInterface;
use NewApiBundle\Entity\Assistance\ReliefPackage;
use Symfony\Contracts\Translation\TranslatorInterface;

class VulnerabilityScoreExport
{
    /** @var ExportService */
    private $csvExportService;

    /** @var TranslatorInterface */
    private $translator;

    /** @var EntityManagerInterface */
    private $em;

    /**
     * @var BeneficiaryRepository
     */
    private $beneficiaryRepository;

    /**
     * @var AssistanceBeneficiaryRepository
     */
    private $assistanceBeneficiaryRepository;

    public function __construct(ExportService $exportService,
                                TranslatorInterface $translator,
                                EntityManagerInterface $em,
                                BeneficiaryRepository $beneficiaryRepository,
                                AssistanceBeneficiaryRepository $assistanceBeneficiaryRepository)
    {
        $this->csvExportService = $exportService;
        $this->translator = $translator;
        $this->em = $em;
        $this->beneficiaryRepository = $beneficiaryRepository;
        $this->assistanceBeneficiaryRepository = $assistanceBeneficiaryRepository;
    }

    /**
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \Doctrine\ORM\NoResultException
     */
    public function export(Assistance $assistance, string $type): ?string
    {
        /** @var AssistanceBeneficiary[] $assistanceBeneficiaries */
        $assistanceBeneficiaries = $this->assistanceBeneficiaryRepository->findByAssistance($assistance);

        $exportableTable = [];
        $amountUnits = [];
        foreach ($assistanceBeneficiaries as $assistanceBeneficiary) {
            /** @var Beneficiary $beneficiary */
            $beneficiary = $assistanceBeneficiary->getBeneficiary();
            $exportableRow = [];
            $assistanceTargetType = $assistance->getTargetType();
            switch ($assistanceTargetType) {
                case AssistanceTargetType::HOUSEHOLD:
                    $targetType = 'Household ID';
                    $household = $beneficiary->getHousehold();
                    $targetId = $household->getId();
                    $membersCount = $this->beneficiaryRepository->countByHousehold($beneficiary->getHousehold());
                    $memberFirstName = $household->getHouseholdHead()->getPerson()->getLocalGivenName();
                    $memberFamilyName = $household->getHouseholdHead()->getPerson()->getLocalFamilyName();

                    break;

                case AssistanceTargetType::INDIVIDUAL:
                    $targetType = 'Beneficiary ID';
                    $targetId = $beneficiary->getId();
                    $membersCount = 1;
                    $memberFirstName = $beneficiary->getPerson()->getLocalGivenName();
                    $memberFamilyName = $beneficiary->getPerson()->getLocalFamilyName();
                    break;

                default:
                    continue 2;
            }

            /** @var string $scores */
            $scores = $assistanceBeneficiary->getVulnerabilityScores();
            if (!$scores) {
                continue;
            }

            $scores = json_decode($scores, true);

            $exportableRow[$this->translator->trans($targetType)] = $targetId;
            $exportableRow[$this->translator->trans('First Name')] = $memberFirstName;
            $exportableRow[$this->translator->trans('Family Name')] = $memberFamilyName;
            $exportableRow[$this->translator->trans('Assets')] = $scores[CategoryEnum::ASSETS];
            $exportableRow[$this->translator->trans('Assistance')] = $scores[CategoryEnum::ASSISTANCE];
            $exportableRow[$this->translator->trans('CSI')] = $scores[CategoryEnum::CSI];
            $exportableRow[$this->translator->trans('Debt')] = $scores[CategoryEnum::DEBT];
            $exportableRow[$this->translator->trans('Dependency Ration')] = $scores[CategoryEnum::DEPENDENCY_RATIO];
            $exportableRow[$this->translator->trans('Displacement Status')] = $scores[CategoryEnum::DISPLACEMENT_STATUS];
            $exportableRow[$this->translator->trans('FCS')] = $scores[CategoryEnum::FCS];
            $exportableRow[$this->translator->trans('Head Gender')] = $scores[CategoryEnum::HHH_GENDER];
            $exportableRow[$this->translator->trans('Head Vulnerability')] = $scores[CategoryEnum::HHH_VULNERABILITY];
            $exportableRow[$this->translator->trans('Members Vulnerability')] = $scores[CategoryEnum::HHM_VULNERABILITY];
            $exportableRow[$this->translator->trans('Income Spent On Food')] = $scores[CategoryEnum::INCOME_FOOD];
            $exportableRow[$this->translator->trans('Income Per Member')] = $scores[CategoryEnum::INCOME_HHM];
            $exportableRow[$this->translator->trans('Residence Ownership')] = $scores[CategoryEnum::RESIDENCE_OWNERSHIP];
            $exportableRow[$this->translator->trans('Settlement')] = $scores[CategoryEnum::SETTLEMENT];
            $exportableRow[$this->translator->trans('Shelter')] = $scores[CategoryEnum::SHELTER];
            $exportableRow[$this->translator->trans('Total Score')] = $scores['totalScore'];
            $exportableRow[$this->translator->trans('BNFs')] = $membersCount;

            $amounts = $this->getCommodityArray($assistanceBeneficiary->getReliefPackages());
            $amountUnits = array_merge($amountUnits, $this->getUnits($assistanceBeneficiary->getReliefPackages()));
            $exportableRow = array_merge($exportableRow, $amounts);

            $exportableTable[] = $exportableRow;
        }

        $amountUnits = array_unique($amountUnits);
        $exportableTable = $this->scoringPostProcess($exportableTable, $amountUnits);

        try {
            return $this->csvExportService->export($exportableTable, 'vulnerabilities', $type);
        } catch (\InvalidArgumentException $ex) {
            return null;
        }
    }

    /**
     * Setridi polozky podle sloupce 'totalScore' sestupne a dopocita kumulativni hodnotu distribuovane castky a poctu BNFs
     *
     * @param $scoring
     * @return mixed
     */
    private function scoringPostProcess($scoring, $amountUnits)
    {
        usort($scoring, function ($a, $b) {
            return $b[$this->translator->trans('Total Score')] <=> $a[$this->translator->trans('Total Score')];
        });

        $cumulatingAmount = 0;
        $cumulatingBeneficiaries = 0;
        for ($cnt = 0; $cnt < count($scoring); $cnt++) { //pro vsechny radky tabulky scoringu
            foreach($amountUnits as $amountUnit) {//pro vsechny sloupce amount v ramci radku tabulky scoringu
                $cumulatingAmount += $scoring[$cnt][$this->translator->trans('Amount') . " [$amountUnit]"];
                $cumulatingBeneficiaries += $scoring[$cnt][$this->translator->trans('BNFs')];
                $scoring[$cnt][$this->translator->trans("Cumulative amount [$amountUnit]")] = $cumulatingAmount;
                $scoring[$cnt][$this->translator->trans("Cumulative BNFs")] = $cumulatingBeneficiaries;
            }
        }

        return $scoring;
    }

    private function getCommodityArray($reliefPackages)
    {
        $result = [];
        /**
         * @var ReliefPackage $reliefPackage
         */
        foreach ($reliefPackages as $reliefPackage) {
            $result[$this->translator->trans('Amount') . ' [' . $reliefPackage->getUnit() . ']'] = $reliefPackage->getAmountToDistribute();
        }

        return $result;
    }

    private function getUnits($reliefPackages)
    {
        $result = [];
        /**
         * @var ReliefPackage $reliefPackage
         */
        foreach ($reliefPackages as $reliefPackage) {
            $result[] = $reliefPackage->getUnit();
        }

        return $result;
    }
}
