<?php
declare(strict_types=1);

namespace NewApiBundle\Export;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Model\Vulnerability\CategoryEnum;
use BeneficiaryBundle\Repository\BeneficiaryRepository;
use CommonBundle\Utils\ExportService;
use NewApiBundle\Component\Assistance\Domain\Assistance as DomainAssistance;
use DistributionBundle\Entity\AssistanceBeneficiary;
use DistributionBundle\Enum\AssistanceTargetType;
use Doctrine\ORM\EntityManagerInterface;
use NewApiBundle\Entity\Assistance\ReliefPackage;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use PhpOffice\PhpSpreadsheet\Cell\Hyperlink;

class VulnerabilityScoreExport
{
    /** @var ExportService */
    private $csvExportService;

    /** @var TranslatorInterface */
    private $translator;

    /** @var EntityManagerInterface */
    private $em;

    /**
     * @var BeneficiaryRepository
     */
    private $beneficiaryRepository;

    /**
     * @var ContainerInterface
     */
    private $container;

    public function __construct(ExportService $exportService,
                                TranslatorInterface $translator,
                                EntityManagerInterface $em,
                                BeneficiaryRepository $beneficiaryRepository,
                                ContainerInterface $container)
    {
        $this->csvExportService = $exportService;
        $this->translator = $translator;
        $this->em = $em;
        $this->beneficiaryRepository = $beneficiaryRepository;
        $this->container = $container;
    }

    /**
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \Doctrine\ORM\NoResultException
     */
    public function export(DomainAssistance $assistance, string $type, string $urlPrefix, int $threshold = null): ?string
    {
        /** @var AssistanceBeneficiary[] $assistanceBeneficiaries */
        $assistanceBeneficiaries = $assistance->getBeneficiaries()->toArray();
        if (is_null($threshold)) {
            $threshold = $assistance->getAssistanceRoot()->getAssistanceSelection()->getThreshold();
        }

        usort($assistanceBeneficiaries, function ($a, $b) {
            $totalVulnerabilityScoreA = $a->getVulnerabilityScores();
            $totalVulnerabilityScoreB = $b->getVulnerabilityScores();

            if (!$totalVulnerabilityScoreA || !$totalVulnerabilityScoreB) {
                return -1;
            } else {
                $totalVulnerabilityScoreA = json_decode($totalVulnerabilityScoreA, true);
                $totalVulnerabilityScoreB = json_decode($totalVulnerabilityScoreB, true);
                $totalVulnerabilityScoreA = $totalVulnerabilityScoreA['totalScore'];
                $totalVulnerabilityScoreB = $totalVulnerabilityScoreB['totalScore'];

                return $totalVulnerabilityScoreB <=> $totalVulnerabilityScoreA;
            }
        });

        $exportableTable = [];
        $cumulativeBNFs = 0;
        $cumulativeAmounts = [];
        foreach ($assistanceBeneficiaries as $assistanceBeneficiary) {
            /** @var Beneficiary $beneficiary */
            $beneficiary = $assistanceBeneficiary->getBeneficiary();
            $exportableRow = [];
            $assistanceTargetType = $assistance->getAssistanceRoot()->getTargetType();

            $household = $beneficiary->getHousehold();
            $householdId = $household->getId();
            switch ($assistanceTargetType) {
                case AssistanceTargetType::HOUSEHOLD:
                    $targetType = 'Household ID';
                    $targetId = $householdId;
                    $membersCount = $this->beneficiaryRepository->countByHousehold($beneficiary->getHousehold());
                    $memberFirstName = $household->getHouseholdHead()->getPerson()->getLocalGivenName();
                    $memberFamilyName = $household->getHouseholdHead()->getPerson()->getLocalFamilyName();

                    break;

                case AssistanceTargetType::INDIVIDUAL:
                    $targetType = 'Beneficiary ID';
                    $targetId = $beneficiary->getId();
                    $membersCount = 1;
                    $memberFirstName = $beneficiary->getPerson()->getLocalGivenName();
                    $memberFamilyName = $beneficiary->getPerson()->getLocalFamilyName();
                    break;

                default:
                    continue 2;
            }

            $cumulativeBNFs += $membersCount;
            $amountsRow = $this->getAmounts($assistanceBeneficiary->getReliefPackages());
            $cumulativeAmountsRow = $this->getCumulativeAmounts($cumulativeAmounts, $assistanceBeneficiary->getReliefPackages());

            /** @var string $scores */
            $scores = $assistanceBeneficiary->getVulnerabilityScores();
            if (!$scores) {
                continue;
            }

            $scores = json_decode($scores, true);

            $exportableRow[$this->translator->trans($targetType)] = new Hyperlink("$urlPrefix/beneficiaries/households/summary/$householdId", $targetId);
            $exportableRow[$this->translator->trans('Family name')] = $memberFamilyName;
            $exportableRow[$this->translator->trans('First name')] = $memberFirstName;
            $exportableRow[$this->translator->trans('BNFs')] = $membersCount;
            $exportableRow[$this->translator->trans('Cumulative BNFs')] = $cumulativeBNFs;
            $exportableRow = array_merge($exportableRow, $amountsRow);
            $exportableRow = array_merge($exportableRow, $cumulativeAmountsRow);
            $exportableRow[$this->translator->trans('Vulnerability')] = $scores['totalScore'];
            $exportableRow[$this->translator->trans('Selected (YES/NO)')] = $scores['totalScore'] >= $threshold ? "YES" : "NO";
            $exportableRow[$this->translator->trans('Gender of household head')] = $scores[CategoryEnum::HHH_GENDER];
            $exportableRow[$this->translator->trans('Vulnerability of household head')] = $scores[CategoryEnum::HHH_VULNERABILITY];
            $exportableRow[$this->translator->trans('Vulnerability of household members')] = $scores[CategoryEnum::HHM_VULNERABILITY];
            $exportableRow[$this->translator->trans('Dependency ration')] = $scores[CategoryEnum::DEPENDENCY_RATIO];
            $exportableRow[$this->translator->trans('Shelter type')] = $scores[CategoryEnum::SHELTER];
            $exportableRow[$this->translator->trans('Settlement type')] = $scores[CategoryEnum::SETTLEMENT];
            $exportableRow[$this->translator->trans('Residence ownership')] = $scores[CategoryEnum::RESIDENCE_OWNERSHIP];
            $exportableRow[$this->translator->trans('Displacement status')] = $scores[CategoryEnum::DISPLACEMENT_STATUS];
            $exportableRow[$this->translator->trans('Income per household member')] = $scores[CategoryEnum::INCOME_HHM];
            $exportableRow[$this->translator->trans('Income spent on food')] = $scores[CategoryEnum::INCOME_FOOD];
            $exportableRow[$this->translator->trans('Debt')] = $scores[CategoryEnum::DEBT];
            $exportableRow[$this->translator->trans('Productive assets')] = $scores[CategoryEnum::ASSETS];
            $exportableRow[$this->translator->trans('Coping strategy index (CSI)')] = $scores[CategoryEnum::CSI];
            $exportableRow[$this->translator->trans('Food consumption scores (FCS)')] = $scores[CategoryEnum::FCS];
            $exportableRow[$this->translator->trans('Assistance provided in the last 3 months')] = $scores[CategoryEnum::ASSISTANCE];

            $exportableTable[] = $exportableRow;
        }

        try {
            return $this->csvExportService->export($exportableTable, 'vulnerabilities', $type, false, true);
        } catch (\InvalidArgumentException $ex) {
            return null;
        }
    }

    private function getAmounts($reliefPackages)
    {
        $result = [];
        /**
         * @var ReliefPackage $reliefPackage
         */
        foreach ($reliefPackages as $reliefPackage) {
            $unit = $reliefPackage->getUnit();
            $amount = $reliefPackage->getAmountToDistribute();
            $result[$this->translator->trans("Amount [$unit]")] = $amount;
        }

        if (count($result) === 0) {
            $result = [$this->translator->trans("Amount []") => ""];
        }

        return $result;
    }

    private function getCumulativeAmounts(&$cumulativeAmount, $reliefPackages)
    {
        $result = [];

        /**
         * @var ReliefPackage $reliefePackage
         */
        foreach ($reliefPackages as $reliefePackage) {
            $unit = $reliefePackage->getUnit();
            $amount = $reliefePackage->getAmountToDistribute();
            if (key_exists($unit, $cumulativeAmount)) {
                $cumulativeAmount[$unit] += $amount;
            } else {
                $cumulativeAmount[$unit] = $amount;
            }

            $result[$this->translator->trans("Cumulative amount [$unit]")] = $cumulativeAmount[$unit];
        }

        if (count($result) === 0) {
            $result = [$this->translator->trans("Cumulative amount []") => ""];
        }

        return $result;
    }
}
