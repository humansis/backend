<?php
declare(strict_types=1);

namespace NewApiBundle\Export;

use NewApiBundle\Entity\Beneficiary;
use NewApiBundle\Repository\BeneficiaryRepository;
use NewApiBundle\Utils\ExportService;
use NewApiBundle\Component\Assistance\Domain\Assistance as DomainAssistance;
use NewApiBundle\Entity\AssistanceBeneficiary;
use NewApiBundle\Enum\AssistanceTargetType;
use NewApiBundle\Component\Assistance\Scoring\Model\ScoringProtocol;
use NewApiBundle\Entity\Assistance\ReliefPackage;
use Symfony\Contracts\Translation\TranslatorInterface;
use PhpOffice\PhpSpreadsheet\Cell\Hyperlink;

class VulnerabilityScoreExport
{
    /** @var ExportService */
    private $csvExportService;

    /** @var TranslatorInterface */
    private $translator;

    /**
     * @var BeneficiaryRepository
     */
    private $beneficiaryRepository;

    /**
     * @var string
     */
    private $frontendUrl;

    public function __construct(string $frontendUrl,
                                ExportService $exportService,
                                TranslatorInterface $translator,
                                BeneficiaryRepository $beneficiaryRepository)
    {
        $this->csvExportService = $exportService;
        $this->translator = $translator;
        $this->beneficiaryRepository = $beneficiaryRepository;
        $this->frontendUrl = $frontendUrl;
    }

    /**
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \Doctrine\ORM\NoResultException
     */
    public function export(DomainAssistance $assistance, string $type, int $threshold = null): ?string
    {
        /** @var AssistanceBeneficiary[] $assistanceBeneficiaries */
        $assistanceBeneficiaries = $assistance->getBeneficiaries()->toArray();
        if (is_null($threshold)) {
            $threshold = $assistance->getAssistanceRoot()->getAssistanceSelection()->getThreshold();
        }

        usort($assistanceBeneficiaries, function (AssistanceBeneficiary $a, AssistanceBeneficiary $b) {
            if (is_null($a->getVulnerabilityScores()) || is_null($b->getVulnerabilityScores())) {
                return -1;
            }

            return $b->getVulnerabilityScores()->getTotalScore() <=> $a->getVulnerabilityScores()->getTotalScore();
        });

        $exportableTable = [];
        $cumulativeBNFs = 0;
        $cumulativeAmounts = [];
        foreach ($assistanceBeneficiaries as $assistanceBeneficiary) {
            /** @var Beneficiary $beneficiary */
            $beneficiary = $assistanceBeneficiary->getBeneficiary();
            $exportableRow = [];
            $assistanceTargetType = $assistance->getAssistanceRoot()->getTargetType();

            $household = $beneficiary->getHousehold();
            $householdId = $household->getId();
            switch ($assistanceTargetType) {
                case AssistanceTargetType::HOUSEHOLD:
                    $targetType = 'Household ID';
                    $targetId = $householdId;
                    $membersCount = $this->beneficiaryRepository->countByHousehold($beneficiary->getHousehold());
                    $memberFirstName = $household->getHouseholdHead()->getPerson()->getLocalGivenName();
                    $memberFamilyName = $household->getHouseholdHead()->getPerson()->getLocalFamilyName();

                    break;

                case AssistanceTargetType::INDIVIDUAL:
                    $targetType = 'Beneficiary ID';
                    $targetId = $beneficiary->getId();
                    $membersCount = 1;
                    $memberFirstName = $beneficiary->getPerson()->getLocalGivenName();
                    $memberFamilyName = $beneficiary->getPerson()->getLocalFamilyName();
                    break;

                default:
                    continue 2;
            }

            $cumulativeBNFs += $membersCount;
            $amountsRow = $this->getAmounts($assistanceBeneficiary->getReliefPackages());
            $cumulativeAmountsRow = $this->getCumulativeAmounts($cumulativeAmounts, $assistanceBeneficiary->getReliefPackages());
            $scoringBlueprint = $assistance->getAssistanceRoot()->getScoringBlueprint();
            $scoringBlueprintName = $scoringBlueprint !== null ? $scoringBlueprint->getName() : 'Default';

            /** @var ScoringProtocol $scoreProtocol */
            $scoreProtocol = $assistanceBeneficiary->getVulnerabilityScores();
            if (!$scoreProtocol) {
                continue;
            }

            $exportableRow[$this->translator->trans($targetType)] = new Hyperlink("{$this->frontendUrl}/beneficiaries/households/summary/$householdId", $targetId);
            $exportableRow[$this->translator->trans('Family name')] = $memberFamilyName;
            $exportableRow[$this->translator->trans('First name')] = $memberFirstName;
            $exportableRow[$this->translator->trans('Household size')] = $membersCount;
            $exportableRow[$this->translator->trans('Cumulative BNFs')] = $cumulativeBNFs;
            $exportableRow = array_merge($exportableRow, $amountsRow);
            $exportableRow = array_merge($exportableRow, $cumulativeAmountsRow);

            $exportableRow[$this->translator->trans('Total vulnerability score [%scoringName%]', ['%scoringName%' => $scoringBlueprintName])] = $scoreProtocol->getTotalScore();
            $exportableRow[$this->translator->trans('Selected (YES/NO)')] = is_null($threshold) || ($scoreProtocol->getTotalScore() >= $threshold) ? 'YES' : 'NO';

            foreach ($scoreProtocol->getAllScores() as $ruleTitle => $score) {
                $exportableRow[$this->translator->trans($ruleTitle)] = $score;
            }

            $exportableTable[] = $exportableRow;
        }

        return $this->csvExportService->export($exportableTable, 'vulnerabilities', $type, false, true);
    }

    /**
     * @param ReliefPackage[] $reliefPackages
     * @return string[]
     */
    private function getAmounts(iterable $reliefPackages): array
    {
        $result = [];

        foreach ($reliefPackages as $reliefPackage) {
            $unit = $reliefPackage->getUnit();
            $amount = $reliefPackage->getAmountToDistribute();
            $result[$this->translator->trans("Amount per househould [%unit%]", ['%unit%' => $unit])] = $amount;
        }

        if (count($result) === 0) {
            $result = [$this->translator->trans('Amount per household []') => ''];
        }

        return $result;
    }

    /**
     * @param double[] $cumulativeAmount
     * @param ReliefPackage[] $reliefPackages
     *
     * @return array|string[]
     */
    private function getCumulativeAmounts(array &$cumulativeAmount, iterable $reliefPackages): array
    {
        $result = [];

        foreach ($reliefPackages as $reliefPackage) {
            $unit = $reliefPackage->getUnit();
            $amount = (double) $reliefPackage->getAmountToDistribute();
            if (key_exists($unit, $cumulativeAmount)) {
                $cumulativeAmount[$unit] += $amount;
            } else {
                $cumulativeAmount[$unit] = $amount;
            }

            $result[$this->translator->trans("Cumulative amount [$unit]")] = $cumulativeAmount[$unit];
        }

        if (count($result) === 0) {
            $result = [$this->translator->trans('Cumulative amount []') => ''];
        }

        return $result;
    }
}
