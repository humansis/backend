<?php

declare(strict_types=1);

namespace Mapper;

use Entity\Organization;
use DTO\VulnerabilityScore;
use InvalidArgumentException;
use Serializer\MapperInterface;

class VulnerabilityScoreMapper implements MapperInterface
{
    private ?\DTO\VulnerabilityScore $object = null;

    public function supports(object $object, $format = null, array $context = null): bool
    {
        return $object instanceof VulnerabilityScore && isset($context[self::NEW_API]) && true === $context[self::NEW_API];
    }

    public function populate(object $object)
    {
        if ($object instanceof VulnerabilityScore) {
            $this->object = $object;

            return;
        }

        throw new InvalidArgumentException(
            'Invalid argument. It should be instance of ' . VulnerabilityScore::class . ', ' . $object::class . ' given.'
        );
    }

    public function getBeneficiaryId(): int
    {
        return $this->object->getBeneficiary()->getId();
    }

    public function getTotalScore(): float
    {
        return $this->object->getTotalScore();
    }
}
