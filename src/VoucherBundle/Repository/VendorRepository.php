<?php

namespace VoucherBundle\Repository;

use NewApiBundle\Entity\Location;
use CommonBundle\Repository\LocationRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use NewApiBundle\Enum\VendorInvoicingState;
use NewApiBundle\InputType\VendorFilterInputType;
use NewApiBundle\InputType\VendorOrderInputType;
use NewApiBundle\Repository\Smartcard\PreliminaryInvoiceRepository;
use NewApiBundle\Request\Pagination;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use NewApiBundle\Entity\User;

/**
 * VendorRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VendorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var LocationRepository
     */
    private $locationRepository;

    /**
     * @var PreliminaryInvoiceRepository
     */
    private $preliminaryInvoiceRepository;

    public function setPreliminaryInvoiceRepository(PreliminaryInvoiceRepository $preliminaryInvoiceRepository): void
    {
        $this->preliminaryInvoiceRepository = $preliminaryInvoiceRepository;
    }

    public function setLocationRepository(LocationRepository $locationRepository)
    {
        $this->locationRepository = $locationRepository;
    }

    public function getVendorByUser(User $user)
    {
        $qb = $this->createQueryBuilder('v');
        $q = $qb->where('v.user = :user')
            ->setParameter('user', $user);

        return $q->getQuery()->getResult();
    }

    public function getVendorCountry(User $user)
    {
        $qb = $this->createQueryBuilder('v');
        $q = $qb->where('v.user = :user')
                ->setParameter('user', $user)
                ->leftJoin('v.location', 'l');

        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->getCountry($q);

        return $q->getQuery()->getSingleResult()['country'];
    }

    public function findByCountry($countryISO3)
    {
        $qb = $this->createQueryBuilder('v')
            ->andWhere('v.archived = false')
            ->leftJoin('v.location', 'l');
        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->whereCountry($qb, $countryISO3);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param string|null                $iso3
     * @param VendorFilterInputType|null $filter
     * @param VendorOrderInputType|null  $orderBy
     * @param Pagination|null            $pagination
     *
     * @return Paginator
     * @throws \NewApiBundle\Enum\EnumValueNoFoundException
     */
    public function findByParams(
        ?string $iso3,
        ?VendorFilterInputType $filter = null,
        ?VendorOrderInputType $orderBy = null,
        ?Pagination $pagination = null
    ): Paginator
    {
        $qb = $this->createQueryBuilder('v')
            ->andWhere('v.archived = 0')
            ->leftJoin('v.location', 'l')
            ->andWhere('l.countryISO3 = :iso3')
            ->setParameter("iso3", $iso3)
        ;

        if ($filter) {
            if ($filter->hasIds()) {
                $qb->andWhere('v.id IN (:ids)')
                    ->setParameter('ids', $filter->getIds());
            }
            if ($filter->hasFulltext()) {
                $qb->leftJoin('v.user', 'u');

                $qb->andWhere('(v.id = :fulltextId OR
                                u.username LIKE :fulltext OR
                                v.vendorNo LIKE :fulltext OR
                                v.contractNo LIKE :fulltext OR
                                v.shop LIKE :fulltext OR
                                v.name LIKE :fulltext OR
                                v.addressNumber LIKE :fulltext OR
                                v.addressPostcode LIKE :fulltext OR
                                v.addressStreet LIKE :fulltext OR
                                l.name LIKE :fulltext)')
                    ->setParameter('fulltextId', $filter->getFulltext())
                    ->setParameter('fulltext', '%'.$filter->getFulltext().'%');
            }

            if ($filter->hasInvoicing()) {
                $preliminaryInvoiceQb = $this->preliminaryInvoiceRepository->provideQueryBuilder('pi')
                    ->select('IDENTITY(pi.vendor)');
                switch ($filter->getInvoicing()) {
                    case VendorInvoicingState::INVOICED:
                        $qb->andWhere("v.id NOT IN  ({$preliminaryInvoiceQb->getDQL()})");
                        break;
                    case VendorInvoicingState::SYNC_REQUIRED:
                        $preliminaryInvoiceQb->andWhere('pi.project IS NULL');
                        $qb->andWhere("v.id IN ({$preliminaryInvoiceQb->getDQL()})");
                        break;
                    case VendorInvoicingState::TO_REDEEM:
                        $preliminaryInvoiceQb->andWhere('pi.project IS NOT NULL');
                        $qb->andWhere("v.id IN ({$preliminaryInvoiceQb->getDQL()})");
                        break;
                }
            }

            $locations = [];

            if ($filter->hasLocations()) {
                foreach ($filter->getLocations() as $locationKey => $locationId) {

                    /** @var Location|null $location */
                    $location = $this->locationRepository->find($locationId);
                    if (is_null($location)) {
                        throw new NotFoundHttpException("Location $locationId was not found");
                    }
                    $locations = array_unique(array_merge($locations, iterator_to_array($this->getChildrenLocationIdListByLocation($location))),
                        SORT_REGULAR);
                }

                if (count($locations) > 0) {
                    $qb->andWhere($qb->expr()->in('v.location', ':locations'))
                        ->setParameter('locations', $locations);
                }
            }
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                switch ($name) {
                    case VendorOrderInputType::SORT_BY_ID:
                        $qb->orderBy('v.id', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_NAME:
                        $qb->orderBy('v.name', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_SHOP:
                        $qb->orderBy('v.shop', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_USERNAME:
                        if (!in_array('u', $qb->getAllAliases())) {
                            $qb->leftJoin('v.user', 'u');
                        }

                        $qb->orderBy('u.username', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_STREET:
                        $qb->orderBy('v.addressStreet', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_NUMBER:
                        $qb->orderBy('v.addressNumber', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_POSTCODE:
                        $qb->orderBy('v.addressPostcode', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_LOCATION:
                        $qb->addOrderBy('l.name', $direction);

                        break;
                    default:
                        throw new \InvalidArgumentException('Invalid order by directive '.$name);
                }
            }
        }

        return new Paginator($qb);
    }

    /**
     * @param Location $location
     *
     * @return \Generator
     */
    private function getChildrenLocationIdListByLocation(Location $location): \Generator
    {
        $children = $this->locationRepository->getChildrenLocations($location);
        foreach ($children as $childKey => $child) {
            yield $child->getId();
        }
    }

}
