<?php

namespace VoucherBundle\Repository;

use CommonBundle\Entity\Location;
use CommonBundle\Repository\Adm1Repository;
use CommonBundle\Repository\Adm2Repository;
use CommonBundle\Repository\Adm3Repository;
use CommonBundle\Repository\Adm4Repository;
use CommonBundle\Repository\AdmBaseRepository;
use CommonBundle\Repository\LocationRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use NewApiBundle\InputType\VendorFilterInputType;
use NewApiBundle\InputType\VendorOrderInputType;
use NewApiBundle\Request\Pagination;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use UserBundle\Entity\User;

/**
 * VendorRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VendorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @var LocationRepository
     */
    private $locationRepository;

    /**
     * @var Adm1Repository
     */
    private $adm1Repository;

    /**
     * @var Adm2Repository
     */
    private $adm2Repository;

    /**
     * @var Adm3Repository
     */
    private $adm3Repository;

    /**
     * @var Adm4Repository
     */
    private $adm4Repository;

    public function setLocationRepository(LocationRepository $locationRepository)
    {
        $this->locationRepository = $locationRepository;
    }

    public function setAdmRepositories(
        Adm1Repository $adm1Repository,
        Adm2Repository $adm2Repository,
        Adm3Repository $adm3Repository,
        Adm4Repository $adm4Repository
    ) {
        $this->adm1Repository = $adm1Repository;
        $this->adm2Repository = $adm2Repository;
        $this->adm3Repository = $adm3Repository;
        $this->adm4Repository = $adm4Repository;
    }

    public function getVendorByUser(User $user)
    {
        $qb = $this->createQueryBuilder('v');
        $q = $qb->where('v.user = :user')
            ->setParameter('user', $user);

        return $q->getQuery()->getResult();
    }

    public function getVendorCountry(User $user)
    {
        $qb = $this->createQueryBuilder('v');
        $q = $qb->where('v.user = :user')
                ->setParameter('user', $user)
                ->leftJoin('v.location', 'l');

        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->getCountry($q);

        return $q->getQuery()->getSingleResult()['country'];
    }

    public function findByCountry($countryISO3)
    {
        $qb = $this->createQueryBuilder('v')
            ->andWhere('v.archived = false')
            ->leftJoin('v.location', 'l');
        $locationRepository = $this->getEntityManager()->getRepository(Location::class);
        $locationRepository->whereCountry($qb, $countryISO3);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param string|null                $iso3
     * @param VendorFilterInputType|null $filter
     * @param VendorOrderInputType|null  $orderBy
     * @param Pagination|null            $pagination
     *
     * @return Paginator
     */
    public function findByParams(
        ?string $iso3,
        ?VendorFilterInputType $filter = null,
        ?VendorOrderInputType $orderBy = null,
        ?Pagination $pagination = null
    ): Paginator
    {
        $qb = $this->createQueryBuilder('v')
            ->andWhere('v.archived = 0')
            ->leftJoin('v.location', 'l')
            ->andWhere('l.countryISO3 = :iso3')
            ->setParameter("iso3", $iso3)
        ;

        if ($filter) {
            if ($filter->hasIds()) {
                $qb->andWhere('v.id IN (:ids)')
                    ->setParameter('ids', $filter->getIds());
            }
            if ($filter->hasFulltext()) {
                $qb->leftJoin('v.user', 'u');

                $qb->andWhere('(v.id = :fulltextId OR
                                u.username LIKE :fulltext OR
                                v.vendorNo LIKE :fulltext OR
                                v.contractNo LIKE :fulltext OR
                                v.shop LIKE :fulltext OR
                                v.name LIKE :fulltext OR
                                v.addressNumber LIKE :fulltext OR
                                v.addressPostcode LIKE :fulltext OR
                                v.addressStreet LIKE :fulltext OR
                                l.name LIKE :fulltext)')
                    ->setParameter('fulltextId', $filter->getFulltext())
                    ->setParameter('fulltext', '%'.$filter->getFulltext().'%');
            }

            $locations = [];

            if ($filter->hasLocations()) {
                foreach ($filter->getLocations() as $locationKey => $locationId) {

                    /** @var Location|null $location */
                    $location = $this->locationRepository->find($locationId);
                    if (is_null($location)) {
                        throw new NotFoundHttpException("Location $locationId was not found");
                    }
                    $locations = array_unique(array_merge($locations, $this->getChildrenLocationIdListByLocation($location)), SORT_REGULAR);
                }
            }
            if ($filter->hasAdms1()) {
                $adm1Locations = $this->getChildrenLocationIdListByAdm($this->adm1Repository, $filter->getAdms1(), 1);
                $locations = array_unique(array_merge($locations, $adm1Locations), SORT_REGULAR);
            }
            if ($filter->hasAdms2()) {
                $adm2Locations = $this->getChildrenLocationIdListByAdm($this->adm2Repository, $filter->getAdms2(), 2);
                $locations = array_unique(array_merge($locations, $adm2Locations), SORT_REGULAR);
            }
            if ($filter->hasAdms3()) {
                $adm3Locations = $this->getChildrenLocationIdListByAdm($this->adm3Repository, $filter->getAdms3(), 3);
                $locations = array_unique(array_merge($locations, $adm3Locations), SORT_REGULAR);
            }
            if ($filter->hasAdms4()) {
                $adm4Locations = $this->getChildrenLocationIdListByAdm($this->adm4Repository, $filter->getAdms4(), 4);
                $locations = array_unique(array_merge($locations, $adm4Locations), SORT_REGULAR);
            }

            if (count($locations) > 0) {
                $qb->andWhere($qb->expr()->in('v.location', ':locations'))
                    ->setParameter('locations', $locations);
            }
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                switch ($name) {
                    case VendorOrderInputType::SORT_BY_ID:
                        $qb->orderBy('v.id', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_NAME:
                        $qb->orderBy('v.name', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_SHOP:
                        $qb->orderBy('v.shop', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_USERNAME:
                        if (!in_array('u', $qb->getAllAliases())) {
                            $qb->leftJoin('v.user', 'u');
                        }

                        $qb->orderBy('u.username', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_STREET:
                        $qb->orderBy('v.addressStreet', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_NUMBER:
                        $qb->orderBy('v.addressNumber', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_ADDRESS_POSTCODE:
                        $qb->orderBy('v.addressPostcode', $direction);
                        break;
                    case VendorOrderInputType::SORT_BY_LOCATION:
                        $qb->addOrderBy('l.name', $direction);

                        break;
                    default:
                        throw new \InvalidArgumentException('Invalid order by directive '.$name);
                }
            }
        }

        return new Paginator($qb);
    }

    /**
     * @param AdmBaseRepository $entityRepository
     * @param array             $admIdList
     * @param int               $level
     *
     * @return int[]
     */
    private function getChildrenLocationIdListByAdm(AdmBaseRepository $entityRepository, array $admIdList, int $level): array
    {
        $locations = [];
        foreach ($admIdList as $admKey => $admId) {
            $adm = $entityRepository->find($admId);
            if (!$adm) {
                throw new NotFoundHttpException(sprintf('Adm%s id %s does not exist', $level, $admId));
            }
            $locations[] = $this->getChildrenLocationIdListByLocation($adm->getLocation());
        }

        return $locations;
    }

    /**
     * @param Location $location
     *
     * @return int[]
     */
    private function getChildrenLocationIdListByLocation(Location $location): iterable
    {
        $locations = [];
        $children = $this->locationRepository->getChildrenLocations($location);
        foreach ($children as $childKey => $child) {
            $locations[] = $child->getId();
        }

        return $locations;
    }
}
