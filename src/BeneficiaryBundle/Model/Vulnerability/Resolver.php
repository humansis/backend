<?php

namespace BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Entity\Household;
use BeneficiaryBundle\Entity\Person;
use BeneficiaryBundle\Entity\VulnerabilityCriterion;
use BeneficiaryBundle\Exception\CsvParserException;
use BeneficiaryBundle\Repository\BeneficiaryRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use NewApiBundle\Enum\HouseholdShelterStatus;
use NewApiBundle\Enum\PersonGender;

class Resolver
{
    private const AGE_LIMIT_INFANT = 5;
    private const AGE_LIMIT_CHILD = 18;
    private const AGE_LIMIT_ELDER = 60;

    private const DEPENDENCY_RATION_NO_ADULTS = 100;

    private const DEFAULT_SCORING_FILE_SUFFIX = 'DEFAULT';


    /** @var string */
    private $scoringFileTemplate;

    /** @var Household */
    private $household;

    private $country;
    private $sector;


    /** @var ScoringValueObject[]|null */
    private $scoring;

    /** @var WeightingValueObject|null */
    private $weighting;


    /** @var BeneficiaryRepository */
    private $beneficiaryRepository;

    /**
     * Resolver constructor.
     *
     * @param string                $weightingFilePath
     * @param string                $scoringFileTemplate
     *
     * @param BeneficiaryRepository $beneficiaryRepository
     *
     * @throws CsvParserException
     */
    public function __construct(string $weightingFilePath, string $scoringFileTemplate, BeneficiaryRepository $beneficiaryRepository)
    {
        $this->beneficiaryRepository = $beneficiaryRepository;
        $this->scoringFileTemplate = $scoringFileTemplate;

        $this->loadWeighting($weightingFilePath);
    }


    /**
     * @param string $weightingFilePath
     *
     * @throws CsvParserException
     */
    private function loadWeighting(string $weightingFilePath)
    {
        $weightingParser = new WeightingParser();
        $this->weighting = $weightingParser->parse($weightingFilePath);
    }


    /**
     * @param string $country
     *
     * @throws CsvParserException
     */
    private function loadScoring(string $country)
    {
        $scoringFilePath = str_replace('<<COUNTRY>>', $country, $this->scoringFileTemplate);

        if (!file_exists($scoringFilePath)) {
            $scoringFilePath = str_replace('<<COUNTRY>>', self::DEFAULT_SCORING_FILE_SUFFIX, $this->scoringFileTemplate);
        }

        $scoringParser = new ScoringParser();
        $this->scoring[$country] = $scoringParser->parse($scoringFilePath);
    }


    /**
     * @param Household $household
     * @param string    $country
     * @param string    $sector
     *
     * @return Protocol
     * @throws CsvParserException
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function compute(Household $household, string $country, string $sector): Protocol
    {
        if (!isset($this->scoring[$country])) {
            $this->loadScoring($country);
        }

        $this->household = $household;
        $this->sector = $sector;
        $this->country = $country;

        $protocol = new Protocol();

        $protocol->addScore(CategoryEnum::HHH_GENDER, $this->computeGenderOfHouseholdHead());
        $protocol->addScore(CategoryEnum::HHH_VULNERABILITY, $this->computeVulnerabilityHeadOfHousehold());
        $protocol->addScore(CategoryEnum::HHM_VULNERABILITY, $this->computeVulnerabilityOfHouseholdMembers());
        $protocol->addScore(CategoryEnum::DEPENDENCY_RATIO, $this->computeDependencyRatio());
        $protocol->addScore(CategoryEnum::SHELTER, $this->computeShelterType());
        $protocol->addScore(CategoryEnum::INCOME_HHM, $this->computeIncomePerHouseholdMember($country));
        $protocol->addScore(CategoryEnum::INCOME_FOOD, $this->computeIncomeSpentOnFood());
        $protocol->addScore(CategoryEnum::DEBT, $this->computeDebt());
        $protocol->addScore(CategoryEnum::ASSETS, $this->computeProductiveAssets());
        $protocol->addScore(CategoryEnum::CSI, $this->computeCopingStrategyIndex());
        $protocol->addScore(CategoryEnum::FCS, $this->computeFoodConsumptionScore());
        $protocol->addScore(CategoryEnum::ASSISTANCE, $this->computeAssistanceProvided());

        return $protocol;
    }


    private function getScore(string $category, string $condition): int
    {
        return $this->scoring[$this->country]->getScore($condition) * $this->weighting->get($this->country, $this->sector, $category);
    }


    private function computeGenderOfHouseholdHead(): int
    {
        $householdHead = $this->household->getHouseholdHead();

        if ($householdHead === null) {
            return 0;
        }

        if ($householdHead->getPerson()->getGender() === PersonGender::FEMALE) {
            return $this->getScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_FEMALE);
        }

        if ($householdHead->getPerson()->getGender() === PersonGender::MALE) {
            return $this->getScore(CategoryEnum::HHH_GENDER, ConditionEnum::HHH_GENDER_MALE);
        }

        return 0;
    }


    private function computeVulnerabilityHeadOfHousehold(): int
    {
        //TODO chronically ill (missing information)

        $score = 0;

        $householdHead = $this->household->getHouseholdHead();

        if ($householdHead === null) {
            return 0;
        }

        $hasVulnerability = false;

        if ($householdHead->getAge() !== null && $householdHead->getAge() < self::AGE_LIMIT_CHILD) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_CHILD);
            $hasVulnerability = true;
        }

        if ($householdHead->getAge() !== null && $householdHead->getAge() >= self::AGE_LIMIT_ELDER) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_ELDERLY);
            $hasVulnerability = true;
        }

        if ($householdHead->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_DISABLED)) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_DISABILITY);
            $hasVulnerability = true;
        }

        if ($householdHead->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_PREGNANT) || $householdHead->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_LACTATING)) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_PREGNANT_LACTATING);
            $hasVulnerability = true;
        }

        if ($householdHead->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL)) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_CHRONICALLY_ILL);
            $hasVulnerability = true;
        }

        if (!$hasVulnerability) {
            $score += $this->getScore(CategoryEnum::HHH_VULNERABILITY, ConditionEnum::HHH_VULNERABILITY_NO_VULNERABILITY);
        }

        return $score;
    }


    private function computeVulnerabilityOfHouseholdMembers(): int
    {
        $members = $this->household->getBeneficiaries();

        $foundVulnerabilities = [
            ConditionEnum::HHM_VULNERABILITY_CHRONICALLY_ILL => false,
            ConditionEnum::HHM_VULNERABILITY_INFANT => false,
            ConditionEnum::HHH_VULNERABILITY_ELDERLY => false,
            ConditionEnum::HHH_VULNERABILITY_DISABILITY => false,
            ConditionEnum::HHH_VULNERABILITY_PREGNANT_LACTATING => false,
        ];

        /** @var Beneficiary $member */
        foreach ($members as $member) {
            //household head
            if ($member->isHead()) {
                continue;
            }

            if ($member->getAge() !== null && $member->getAge() < self::AGE_LIMIT_INFANT) {
                $foundVulnerabilities[ConditionEnum::HHM_VULNERABILITY_INFANT] = true;
            }

            if ($member->getAge() !== null && $member->getAge() >= self::AGE_LIMIT_ELDER) {
                $foundVulnerabilities[ConditionEnum::HHM_VULNERABILITY_ELDERLY] = true;
            }

            if ($member->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_DISABLED)) {
                $foundVulnerabilities[ConditionEnum::HHM_VULNERABILITY_DISABILITY] = true;
            }

            if ($member->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL)) {
                $foundVulnerabilities[ConditionEnum::HHM_VULNERABILITY_CHRONICALLY_ILL] = true;
            }

            if ($member->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_PREGNANT) || $member->hasVulnerabilityCriteria(VulnerabilityCriterion::CRITERION_LACTATING)) {
                $foundVulnerabilities[ConditionEnum::HHM_VULNERABILITY_PREGNANT_LACTATING] = true;
            }
        }

        $score = 0;
        $hasVulnerability = false;

        foreach ($foundVulnerabilities as $vulnerability => $found) {
            if ($found) {
                $score += $this->getScore(CategoryEnum::HHM_VULNERABILITY, $vulnerability);
                $hasVulnerability = true;
            }
        }

        if (!$hasVulnerability) {
            $score = $this->getScore(CategoryEnum::HHM_VULNERABILITY, ConditionEnum::HHM_VULNERABILITY_NO_VULNERABILITY);
        }

        return $score;
    }


    private function computeDependencyRatio(): int
    {
        $children = 0;
        $adults = 0;
        $elders = 0;
        $adultsWithDisabilities = 0;
        $adultsChronicallyIll = 0;

        if ($this->household->getBeneficiaries()->count() === 0){
            return 0;
        }

        /** @var Beneficiary $beneficiary */
        foreach ($this->household->getBeneficiaries() as $beneficiary) {
            if ($beneficiary->getPerson()->getAge() === null) {
                continue;
            }

            if ($beneficiary->getPerson()->getAge() < self::AGE_LIMIT_CHILD) {
                $children++;
            } else if ($beneficiary->getPerson()->getAge() < self::AGE_LIMIT_ELDER) {
                $adults++;

                /** @var VulnerabilityCriterion $criterion */
                foreach ($beneficiary->getVulnerabilityCriteria() as $criterion) {
                    if ($criterion->getFieldString() === VulnerabilityCriterion::CRITERION_DISABLED) {
                        $adultsWithDisabilities++;
                    }

                    if ($criterion->getFieldString() === VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL) {
                        $adultsChronicallyIll++;
                    }
                }
            } else {
                $elders++;
            }
        }

        $adults -= $adultsWithDisabilities;
        $adults -= $adultsChronicallyIll;

        if ($adults === 0) {
            $dependencyRatio = self::DEPENDENCY_RATION_NO_ADULTS;
        } else {
            $dependencyRatio = ($children + $elders + $adultsWithDisabilities + $adultsChronicallyIll) / $adults;
        }

        if ($dependencyRatio <= 1) {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_1);
        } else if ($dependencyRatio <= 2 ) {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_2);
        } else if ($dependencyRatio <= 3) {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_3);
        } else if ($dependencyRatio <= 4) {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_4);
        } else if ($dependencyRatio <= 5) {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_5);
        } else {
            return $this->getScore(CategoryEnum::DEPENDENCY_RATIO, ConditionEnum::DEPENDENCY_RATIO_6);
        }
    }


    private function computeShelterType(): int
    {
        $shelterStatus = $this->household->getShelterStatus();

        if ($shelterStatus === null) {
            return 0;
        }

        switch ($shelterStatus) {
            case HouseholdShelterStatus::TENT:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_TENT);
            case HouseholdShelterStatus::MAKESHIFT_SHELTER:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_MAKESHIFT);
            case HouseholdShelterStatus::TRANSITIONAL_SHELTER:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_TRANSITIONAL);
            case HouseholdShelterStatus::HOUSE_APARTMENT_SEVERELY_DAMAGED:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_SEVERELY_DAMAGED);
            case HouseholdShelterStatus::HOUSE_APARTMENT_MODERATELY_DAMAGED:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_MODERATELY_DAMAGED);
            case HouseholdShelterStatus::HOUSE_APARTMENT_NOT_DAMAGED:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_GOOD_CONDITION);
            case HouseholdShelterStatus::ROOM_OR_SPACE_IN_PUBLIC_BUILDING:
            case HouseholdShelterStatus::ROOM_OR_SPACE_IN_UNFINISHED_BUILDING:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_SHARED);
            default:
                return $this->getScore(CategoryEnum::SHELTER, ConditionEnum::SHELTER_OTHER);

        }
    }


    private function settlementType(): int
    {
        //TODO missing information

        return 0;
    }


    private function residenceOwnership(): int
    {
        //TODO missing information

        return 0;
    }


    private function displacementStatus(): int
    {
        //TODO missing some information

        return 0;
    }


    /**
     * @param string $country
     *
     * @return int
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    private function computeIncomePerHouseholdMember(string $country): int
    {
        if ($this->household->getHouseholdIncome() === null) {
            return 0;
        }

        $totalMembers = $this->beneficiaryRepository->countByHousehold($this->household);
        if ($totalMembers === 0) {
            return 0;
        }

        $incomePerMember = $this->household->getHouseholdIncome() / $totalMembers;

        if ($incomePerMember > $this->scoring[$country]->getConditionValue(ConditionEnum::INCOME_HHM_VERY_LOW)) {
            return $this->getScore(CategoryEnum::INCOME_HHM, ConditionEnum::INCOME_HHM_VERY_LOW);
        } elseif ($incomePerMember > $this->scoring[$country]->getConditionValue(ConditionEnum::INCOME_HHM_LOW)) {
            return $this->getScore(CategoryEnum::INCOME_HHM, ConditionEnum::INCOME_HHM_LOW);
        } elseif ($incomePerMember > $this->scoring[$country]->getConditionValue(ConditionEnum::INCOME_HHM_MODERATE)) {
            return $this->getScore(CategoryEnum::INCOME_HHM, ConditionEnum::INCOME_HHM_MODERATE);
        } elseif ($incomePerMember > $this->scoring[$country]->getConditionValue(ConditionEnum::INCOME_HHM_HIGH)) {
            return $this->getScore(CategoryEnum::INCOME_HHM, ConditionEnum::INCOME_HHM_HIGH);
        } else {
            return $this->getScore(CategoryEnum::INCOME_HHM, ConditionEnum::INCOME_HHM_VERY_HIGH);
        }
    }


    private function computeIncomeSpentOnFood(): int
    {
        if ($this->household->getIncomeSpentOnFood() === null || $this->household->getHouseholdIncome() === null) {
            return 0;
        }

        if ($this->household->getHouseholdIncome() === 0) {
            return 0;
        }

        $spentOnFood = $this->household->getIncomeSpentOnFood() / $this->household->getHouseholdIncome();


        if ($spentOnFood > 0.75) {
            return $this->getScore(CategoryEnum::INCOME_FOOD, ConditionEnum::INCOME_FOOD_75);
        } elseif ($spentOnFood > 0.65) {
            return $this->getScore(CategoryEnum::INCOME_FOOD, ConditionEnum::INCOME_FOOD_65);
        } elseif ($spentOnFood > 0.50) {
            return $this->getScore(CategoryEnum::INCOME_FOOD, ConditionEnum::INCOME_FOOD_50);
        } else {
            return $this->getScore(CategoryEnum::INCOME_FOOD, ConditionEnum::INCOME_FOOD_0);
        }
    }


    private function computeDebt(): int
    {
        $debt = $this->household->getDebtLevel();

        if ($debt === null) {
            return 0;
        }

        if ($debt > $this->scoring[$this->country]->getConditionValue(ConditionEnum::DEBT_EXTREME)) {
            return $this->getScore(CategoryEnum::DEBT, ConditionEnum::DEBT_EXTREME);
        } else if ($debt > $this->scoring[$this->country]->getConditionValue(ConditionEnum::DEBT_HIGH)) {
            return $this->getScore(CategoryEnum::DEBT, ConditionEnum::DEBT_HIGH);
        } else if ($debt > $this->scoring[$this->country]->getConditionValue(ConditionEnum::DEBT_MODERATE)) {
            return $this->getScore(CategoryEnum::DEBT, ConditionEnum::DEBT_MODERATE);
        } else if ($debt > $this->scoring[$this->country]->getConditionValue(ConditionEnum::DEBT_LOW)) {
            return $this->getScore(CategoryEnum::DEBT, ConditionEnum::DEBT_LOW);
        } else if ($debt > $this->scoring[$this->country]->getConditionValue(ConditionEnum::DEBT_VERY_LOW)) {
            return $this->getScore(CategoryEnum::DEBT, ConditionEnum::DEBT_VERY_LOW);
        }

        return 0;
    }


    private function computeProductiveAssets(): int
    {
        switch (count($this->household->getAssets())) {
            case 0:
                return 0;
            case 1:
                return $this->getScore(CategoryEnum::ASSETS, ConditionEnum::ASSETS_1);
            case 2:
                return $this->getScore(CategoryEnum::ASSETS, ConditionEnum::ASSETS_2);
            case 3:
                return $this->getScore(CategoryEnum::ASSETS, ConditionEnum::ASSETS_3);
            case 4:
                return $this->getScore(CategoryEnum::ASSETS, ConditionEnum::ASSETS_4);
            default:
                return $this->getScore(CategoryEnum::ASSETS, ConditionEnum::ASSETS_5);
        }
    }


    private function computeCopingStrategyIndex()
    {
        $csi = $this->household->getCopingStrategiesIndex();

        if ($csi === null) {
            return 0;
        }

        if ($csi > 40) {
            return $this->getScore(CategoryEnum::CSI, ConditionEnum::CSI_40);
        } else if ($csi > 30) {
            return $this->getScore(CategoryEnum::CSI, ConditionEnum::CSI_30);
        } else if ($csi > 20) {
            return $this->getScore(CategoryEnum::CSI, ConditionEnum::CSI_20);
        } else {
            return $this->getScore(CategoryEnum::CSI, ConditionEnum::CSI_0);
        }
    }


    private function computeFoodConsumptionScore()
    {
        $fcs = $this->household->getFoodConsumptionScore();

        if ($fcs === null) {
            return 0;
        }

        if ($fcs > 35) {
            return $this->getScore(CategoryEnum::FCS, ConditionEnum::FCS_35);
        } else if ($fcs > 21) {
            return $this->getScore(CategoryEnum::FCS, ConditionEnum::FCS_21);
        } else {
            return $this->getScore(CategoryEnum::FCS, ConditionEnum::FCS_0);
        }
    }


    private function computeAssistanceProvided(): int
    {
        return 0;
    }
}
