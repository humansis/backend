<?php

namespace ProjectBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use NewApiBundle\InputType\ProjectFilterInputType;
use NewApiBundle\InputType\ProjectOrderInputType;
use NewApiBundle\Request\Pagination;
use UserBundle\Entity\User;
use ProjectBundle\Entity\Project;
use BeneficiaryBundle\Entity\Household;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllOfUser(User $user)
    {
        $qb = $this->createQueryBuilder("p");
        $q = $qb->leftJoin("p.usersProject", "up")
            ->where("up.user = :user")
            ->andWhere("p.archived = 0")
            ->setParameter("user", $user);

        return $q->getQuery()->getResult();
    }

    public function getAllOfCountry($iso3)
    {
        $qb = $this->createQueryBuilder("p");
        $q = $qb->where("p.iso3 = :iso3")
            ->andWhere("p.archived = 0")
            ->setParameter("iso3", $iso3);

        return $q->getQuery()->getResult();
    }

    public function countActiveInCountry(string $iso3): int
    {
        $qb = $this->createQueryBuilder("p");
        $qb->select('COUNT(p) as c')
            ->where("p.iso3 = :iso3")
            ->andWhere("p.archived = 0")
            ->andWhere(":currentTime BETWEEN p.startDate AND p.endDate")
            ->setParameter("iso3", $iso3)
            ->setParameter("currentTime", new \DateTime());

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByCountries(array $iso3) {
        $qbr = $this->createQueryBuilder('p')
            ->andWhere('p.iso3 IN (:iso3)')
            ->andWhere('p.archived = 0')
            ->setParameter('iso3', $iso3);

        return $qbr->getQuery()->getResult();
    }

    /**
     * @param User|null                   $user
     * @param string|null                 $iso3
     * @param ProjectFilterInputType|null $filter
     * @param ProjectOrderInputType|null  $orderBy
     * @param Pagination|null             $pagination
     *
     * @return Paginator
     */
    public function findByParams(
        ?User $user,
        ?string $iso3,
        ?ProjectFilterInputType $filter,
        ?ProjectOrderInputType $orderBy = null,
        ?Pagination $pagination = null
    ): Paginator
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.archived = 0');

        if ($user && !$user->getProjects()->isEmpty()) {
            $qb->leftJoin('p.usersProject', 'up')
                ->andWhere('up.user = :user')
                ->setParameter('user', $user);
        }

        if ($iso3) {
            $qb->andWhere('p.iso3 = :iso3');
            $qb->setParameter('iso3', $iso3);
        }

        if ($filter) {
            if ($filter->hasIds()) {
                $qb->andWhere('p.id IN (:ids)');
                $qb->setParameter('ids', $filter->getIds());
            }

            if ($filter->hasFulltext()) {
                $qb->andWhere('(p.iso3 LIKE :fulltext OR
                               p.name LIKE :fulltext OR
                               p.internalId LIKE :fulltext OR
                               p.notes LIKE :fulltext)')
                    ->setParameter('fulltext', '%'.$filter->getFulltext().'%');
            }
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                switch ($name) {
                    case ProjectOrderInputType::SORT_BY_ID:
                        $qb->orderBy('p.id', $direction);
                        break;
                    case ProjectOrderInputType::SORT_BY_NAME:
                        $qb->orderBy('p.name', $direction);
                        break;
                    case ProjectOrderInputType::SORT_BY_INTERNAL_ID:
                        $qb->orderBy('p.internalId', $direction);
                        break;
                    case ProjectOrderInputType::SORT_BY_START_DATE:
                        $qb->orderBy('p.startDate', $direction);
                        break;
                    case ProjectOrderInputType::SORT_BY_END_DATE:
                        $qb->orderBy('p.endDate', $direction);
                        break;
                    case ProjectOrderInputType::SORT_BY_NUMBER_OF_HOUSEHOLDS:
                        $qb->orderBy('SIZE(p.households)', $direction);
                        break;
                    default:
                        throw new \InvalidArgumentException('Invalid order by directive '.$name);
                }
            }
        }

        return new Paginator($qb);
    }
}
