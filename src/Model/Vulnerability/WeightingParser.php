<?php

namespace Model\Vulnerability;

use Exception\CsvParserException;
use Exception\WeightingCsvException;
use Model\AbstractCsvParser;
use DBAL\SectorEnum;

class WeightingParser extends AbstractCsvParser
{
    public const COUNTRY_COLUMN = 'country';
    public const SECTOR_COLUMN = 'sector';

    private const COUNTRY_LENGTH = 3;


    protected function mandatoryColumns(): array
    {
        return array_merge([self::COUNTRY_COLUMN, self::SECTOR_COLUMN], CategoryEnum::all());
    }


    /**
     * @param array $csv
     *
     * @return WeightingValueObject
     *
     * @throws WeightingCsvException|CsvParserException
     */
    protected function processCsv(array $csv): object
    {
        unset($csv[0]); //ignore second column (user custom text, doesn't contain any usable information)

        $valueObject = new WeightingValueObject();

        foreach ($csv as $row) {
            if ($this->rowEmpty($row)) {
                continue;
            }

            $this->checkRow($row);

            if (empty($row[self::COUNTRY_COLUMN]) && empty($row[self::SECTOR_COLUMN])) {
                $valueObject->setDefault($row);
            } elseif (empty($row[self::SECTOR_COLUMN])) {
                $valueObject->setCountryDefault($row);
            } elseif (empty($row[self::COUNTRY_COLUMN])) {
                $valueObject->setSectorDefault($row);
            } else {
                $valueObject->setSpecific($row);
            }
        }

        $valueObject->validate();

        return $valueObject;
    }


    /**
     * @param string $country
     *
     * @throws WeightingCsvException
     */
    private function checkCountryFormat(string $country): void
    {
        if (empty($country)) {
            return;
        }

        if (self::COUNTRY_LENGTH !== strlen($country) || !ctype_alpha($country)) {
            throw new WeightingCsvException('Bad country format ('.$country.')');
        }
    }


    /**
     * @param string $sector
     *
     * @throws WeightingCsvException
     */
    private function checkSectorExists(string $sector): void
    {
        if (!in_array($sector, SectorEnum::all()) && !empty($sector)) {
            throw new WeightingCsvException('Unknown sector ('.$sector.')');
        }
    }


    /**
     * @param array $row
     *
     * @throws WeightingCsvException
     */
    private function checkRow(array $row)
    {
        $this->checkCountryFormat($row[self::COUNTRY_COLUMN]);
        $this->checkSectorExists($row[self::SECTOR_COLUMN]);

        foreach (CategoryEnum::all() as $category) {
            if (0 === strlen($row[$category])) {
                throw new WeightingCsvException('Missing value');
            }

            if (!is_numeric($row[$category])) {
                throw new WeightingCsvException('Bad format value');
            }
        }
    }
}
