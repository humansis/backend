<?php

namespace Model\Vulnerability;

use Exception\CsvParserException;
use DBAL\SectorEnum;

class WeightingValueObject
{
    private $default = [];
    private $countryDefault = [];
    private $sectorDefault = [];
    private $specific = [];

    private $countries = [];


    public function setDefault(array $row): void
    {
        foreach (CategoryEnum::all() as $category) {
            $this->default[$category] = (int) $row[$category];
        }
    }


    public function setCountryDefault(array $row): void
    {
        foreach (CategoryEnum::all() as $category) {
            $this->countryDefault[$row[WeightingParser::COUNTRY_COLUMN]][$category] = (int) $row[$category];
        }

        $this->addCountry($row[WeightingParser::COUNTRY_COLUMN]);
    }


    public function setSectorDefault(array $row): void
    {
        foreach (CategoryEnum::all() as $category) {
            $this->sectorDefault[$row[WeightingParser::SECTOR_COLUMN]][$category] = (int) $row[$category];
        }
    }


    public function setSpecific(array $row): void
    {
        foreach (CategoryEnum::all() as $category) {
            $this->specific[$row[WeightingParser::COUNTRY_COLUMN]][$row[WeightingParser::SECTOR_COLUMN]][$category] = (int) $row[$category];
        }

        $this->addCountry($row[WeightingParser::COUNTRY_COLUMN]);
    }


    private function addCountry(string $country): void
    {
        if (!isset($this->countries[$country])) {
            $this->countries[] = $country;
        }
    }


    public function get(string $country, string $sector, string $category): ?int
    {
        if (isset($this->specific[$country][$sector][$category])) {
            return $this->specific[$country][$sector][$category];
        }

        if (isset($this->sectorDefault[$sector][$category])) {
            return $this->sectorDefault[$sector][$category];
        }

        if (isset($this->countryDefault[$country][$category])) {
            return $this->countryDefault[$country][$category];
        }

        if (isset($this->default[$category])) {
            return $this->default[$category];
        }

        return null;
    }


    /**
     * @throws CsvParserException
     */
    public function validate()
    {
        foreach (CategoryEnum::all() as $category) {
            foreach (SectorEnum::all() as $sector) {
                foreach ($this->countries as $country) {
                    if (null === $this->get($country, $sector, $category)) {
                        throw new CsvParserException("Missing value for country: $country, sector: $sector, category: $category");
                    }
                }
            }
        }
    }
}
