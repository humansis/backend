<?php
/**
 * Organization
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  Humansis\WebApi\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Humansis Web App
 *
 * This is an API documentation for Humansis Web App.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace Humansis\WebApi\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Organization model.
 *
 * @package Humansis\WebApi\Model
 * @author  OpenAPI Generator team
 */
class Organization 
{
        /**
     * Primary identifier
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $id;

    /**
     * @var string|null
     * @SerializedName("logo")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $logo;

    /**
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $name;

    /**
     * @var string|null
     * @SerializedName("primaryColor")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $primaryColor;

    /**
     * @var string|null
     * @SerializedName("secondaryColor")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $secondaryColor;

    /**
     * @var string|null
     * @SerializedName("font")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $font;

    /**
     * @var string|null
     * @SerializedName("footerContent")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     */
    protected $footerContent;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->logo = isset($data['logo']) ? $data['logo'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->primaryColor = isset($data['primaryColor']) ? $data['primaryColor'] : null;
        $this->secondaryColor = isset($data['secondaryColor']) ? $data['secondaryColor'] : null;
        $this->font = isset($data['font']) ? $data['font'] : null;
        $this->footerContent = isset($data['footerContent']) ? $data['footerContent'] : null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id  Primary identifier
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets logo.
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->logo;
    }

    /**
     * Sets logo.
     *
     * @param string|null $logo
     *
     * @return $this
     */
    public function setLogo($logo = null)
    {
        $this->logo = $logo;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets primaryColor.
     *
     * @return string|null
     */
    public function getPrimaryColor()
    {
        return $this->primaryColor;
    }

    /**
     * Sets primaryColor.
     *
     * @param string|null $primaryColor
     *
     * @return $this
     */
    public function setPrimaryColor($primaryColor = null)
    {
        $this->primaryColor = $primaryColor;

        return $this;
    }

    /**
     * Gets secondaryColor.
     *
     * @return string|null
     */
    public function getSecondaryColor()
    {
        return $this->secondaryColor;
    }

    /**
     * Sets secondaryColor.
     *
     * @param string|null $secondaryColor
     *
     * @return $this
     */
    public function setSecondaryColor($secondaryColor = null)
    {
        $this->secondaryColor = $secondaryColor;

        return $this;
    }

    /**
     * Gets font.
     *
     * @return string|null
     */
    public function getFont()
    {
        return $this->font;
    }

    /**
     * Sets font.
     *
     * @param string|null $font
     *
     * @return $this
     */
    public function setFont($font = null)
    {
        $this->font = $font;

        return $this;
    }

    /**
     * Gets footerContent.
     *
     * @return string|null
     */
    public function getFooterContent()
    {
        return $this->footerContent;
    }

    /**
     * Sets footerContent.
     *
     * @param string|null $footerContent
     *
     * @return $this
     */
    public function setFooterContent($footerContent = null)
    {
        $this->footerContent = $footerContent;

        return $this;
    }
}


