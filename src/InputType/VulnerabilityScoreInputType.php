<?php

declare(strict_types=1);

namespace InputType;

use Component\Assistance\Scoring\Validator\ScoringType;
use DBAL\SectorEnum;
use Request\InputTypeInterface;
use Symfony\Component\Validator\Constraints as Assert;

#[Assert\GroupSequence(['VulnerabilityScoreInputType', 'Strict'])]
final class VulnerabilityScoreInputType implements InputTypeInterface
{
    #[Assert\All(constraints: [new Assert\Type('integer', groups: ['Strict'])], groups: ['Strict'])]
    #[Assert\Type('array')]
    #[Assert\NotBlank]
    private ?array $beneficiaryIds = null;

    /**?int
     *
     * @var string
     */
    #[Assert\NotNull]
    #[Assert\Choice(callback: [SectorEnum::class, "all"])]
    private $sector;

    #[Assert\Type('integer', groups: ['Strict'])]
    private ?int $scoringBlueprintId = null;

    #[Assert\Type('integer', groups: ['Strict'])]
    private ?int $threshold = null;

    /**
     * @return string
     */
    public function getSector()
    {
        return $this->sector;
    }

    /**
     * @param string $sector
     */
    public function setSector($sector): void
    {
        $this->sector = $sector;
    }

    public function getScoringBlueprintId(): ?int
    {
        return $this->scoringBlueprintId;
    }

    public function setScoringBlueprintId(?int $scoringBlueprintId): VulnerabilityScoreInputType
    {
        $this->scoringBlueprintId = $scoringBlueprintId;

        return $this;
    }

    /**
     * @return array
     */
    public function getBeneficiaryIds()
    {
        return $this->beneficiaryIds;
    }

    /**
     * @param array $beneficiaryIds
     */
    public function setBeneficiaryIds($beneficiaryIds): void
    {
        $this->beneficiaryIds = $beneficiaryIds;
    }

    /**
     * @return int|null
     */
    public function getThreshold()
    {
        return $this->threshold;
    }

    /**
     * @param int|null $threshold
     */
    public function setThreshold($threshold): void
    {
        $this->threshold = $threshold;
    }
}
