<?php

namespace Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DTO\ProjectDTO;
use Entity\Assistance;
use Entity\Beneficiary;
use Entity\Donor;
use Entity\Household;
use Entity\ProjectSector;
use Enum\RoleType;
use InputType\ProjectFilterInputType;
use InputType\ProjectOrderInputType;
use InvalidArgumentException;
use Request\Pagination;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
use Entity\User;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{
    private ?\Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $security = null;

    public function injectSecurity(AuthorizationCheckerInterface $security)
    {
        $this->security = $security;
    }

    public function getAllOfCountry($iso3)
    {
        $qb = $this->createQueryBuilder("p");
        $q = $qb->where("p.countryIso3 = :iso3")
            ->andWhere("p.archived = 0")
            ->setParameter("iso3", $iso3);

        return $q->getQuery()->getResult();
    }

    public function countActiveInCountry(string $iso3): int
    {
        $qb = $this->createQueryBuilder("p");
        $qb->select('COUNT(p) as c')
            ->where("p.countryIso3 = :iso3")
            ->andWhere("p.archived = 0")
            ->andWhere(":currentTime BETWEEN p.startDate AND p.endDate")
            ->setParameter("iso3", $iso3)
            ->setParameter("currentTime", new DateTime());

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByCountries(array $iso3)
    {
        $qbr = $this->createQueryBuilder('p')
            ->andWhere('p.countryIso3 IN (:iso3)')
            ->andWhere('p.archived = 0')
            ->setParameter('iso3', $iso3);

        return $qbr->getQuery()->getResult();
    }

    public function findByParamsSelectIntoDTO(
        User | null $user,
        string | null $iso3,
        ProjectFilterInputType | null $filter,
        ProjectOrderInputType | null $orderBy = null,
        Pagination | null $pagination = null
    ): Paginator {
        $qb = $this->getProjectsQuery(
            $user,
            $iso3,
            $filter,
            $orderBy,
            $pagination
        );

        $qb->addSelect(
            sprintf(
                'NEW %s(
                        p.id,
                        p.name,
                        p.internalId,
                        :iso3,
                        p.notes,
                        p.target,
                        p.startDate,
                        p.endDate,
                        (
                            SELECT GROUP_CONCAT(s.sector)
                            FROM ' . ProjectSector::class . ' s
                            WHERE s.project = p.id
                        ),
                        (
                            SELECT GROUP_CONCAT(d.id)
                            FROM ' . Donor::class . ' d
                            WHERE d MEMBER OF p.donors
                        ),
                        (
                            SELECT COUNT(h.id)
                            FROM ' . Household::class . ' h
                            WHERE p MEMBER OF h.projects AND h.archived = 0
                        ),
                        (
                            SELECT COUNT(a.id)
                            FROM ' . Assistance::class . ' a
                            WHERE a.project = p AND NOT (a.archived != 0 AND a.completed != 0)
                        ),
                        (
                            SELECT COUNT(DISTINCT b)
                            FROM ' . Beneficiary::class . ' b
                            INNER JOIN b.household hh WHERE p MEMBER OF hh.projects AND b.archived = 0
                        ),
                        p.projectInvoiceAddressLocal,
                        p.projectInvoiceAddressEnglish,
                        p.allowedProductCategoryTypes,
                        p.createdAt,
                        p.lastModifiedAt
                    )',
                ProjectDTO::class
            )
        )
            ->setParameter('iso3', $iso3)
            ->andWhere('p.archived = 0');

        $paginator = new Paginator($qb, false);
        $paginator->setUseOutputWalkers(false);

        return $paginator;
    }

    public function findByParams(
        User | null $user,
        string | null $iso3,
        ProjectFilterInputType | null $filter,
        ProjectOrderInputType | null $orderBy = null,
        Pagination | null $pagination = null
    ): Paginator {
        $qb = $this->getProjectsQuery(
            $user,
            $iso3,
            $filter,
            $orderBy,
            $pagination
        );

        return new Paginator($qb);
    }

    private function getProjectsQuery(
        User | null $user,
        string | null $iso3,
        ProjectFilterInputType | null $filter,
        ProjectOrderInputType | null $orderBy = null,
        Pagination | null $pagination = null
    ): QueryBuilder {
        $qb = $this->createQueryBuilder('p')
            ->setParameter('iso3', $iso3)
            ->andWhere('p.archived = 0');

        if ($user) {
            if (!$this->security->isGranted(RoleType::ADMIN)) {    // admin should see all projects
                if (!$user->getProjects()->isEmpty()) {
                    $qb->leftJoin('p.usersProject', 'up')
                        ->andWhere('up.user = :user')
                        ->setParameter('user', $user);
                }
            }
        }

        if ($iso3) {
            $qb->andWhere('p.countryIso3 = :iso3');
            $qb->setParameter('iso3', $iso3);
        }

        if ($filter) {
            if ($filter->hasIds()) {
                $qb->andWhere('p.id IN (:ids)');
                $qb->setParameter('ids', $filter->getIds());
            }

            if ($filter->hasFulltext()) {
                $qb->andWhere(
                    '(p.countryIso3 LIKE :fulltext OR
                               p.name LIKE :fulltext OR
                               p.internalId LIKE :fulltext OR
                               p.notes LIKE :fulltext)'
                )
                    ->setParameter('fulltext', '%' . $filter->getFulltext() . '%');
            }
        }

        if ($pagination) {
            $qb->setMaxResults($pagination->getLimit());
            $qb->setFirstResult($pagination->getOffset());
        }

        if ($orderBy) {
            foreach ($orderBy->toArray() as $name => $direction) {
                match ($name) {
                    ProjectOrderInputType::SORT_BY_ID => $qb->orderBy('p.id', $direction),
                    ProjectOrderInputType::SORT_BY_NAME => $qb->orderBy('p.name', $direction),
                    ProjectOrderInputType::SORT_BY_INTERNAL_ID => $qb->orderBy('p.internalId', $direction),
                    ProjectOrderInputType::SORT_BY_START_DATE => $qb->orderBy('p.startDate', $direction),
                    ProjectOrderInputType::SORT_BY_END_DATE => $qb->orderBy('p.endDate', $direction),
                    ProjectOrderInputType::SORT_BY_NUMBER_OF_HOUSEHOLDS => $qb->orderBy(
                        'SIZE(p.households)',
                        $direction
                    ),
                    default => throw new InvalidArgumentException('Invalid order by directive ' . $name),
                };
            }
        }

        return $qb;
    }

    public function getProjectCountriesByUser(User $user): array
    {
        return $this->createQueryBuilder('p')
            ->select('p.countryIso3')
            ->leftJoin('p.usersProject', 'up')
            ->where('up.user = :user')
            ->setParameter('user', $user)
            ->groupBy('p.countryIso3')
            ->getQuery()
            ->getResult();
    }
}
