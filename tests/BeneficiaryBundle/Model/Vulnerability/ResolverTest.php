<?php

namespace Tests\BeneficiaryBundle\Model\Vulnerability;

use BeneficiaryBundle\Entity\Beneficiary;
use BeneficiaryBundle\Entity\Household;
use BeneficiaryBundle\Entity\Person;
use BeneficiaryBundle\Entity\VulnerabilityCriterion;
use BeneficiaryBundle\Enum\HouseholdShelterStatuses;
use BeneficiaryBundle\Exception\CsvParserException;
use BeneficiaryBundle\Model\Vulnerability\CategoryEnum;
use BeneficiaryBundle\Model\Vulnerability\Resolver;
use BeneficiaryBundle\Repository\BeneficiaryRepository;
use DateTime;
use ProjectBundle\DBAL\SectorEnum;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ResolverTest extends KernelTestCase
{
    private const TEST_COUNTRY = 'SYR';
    private const TEST_SECTOR = SectorEnum::LIVELIHOODS;

    private const SCORING_FILE_PATH = __DIR__.'/../../Resources/Vulnerability/resolver_scoring_<<COUNTRY>>.csv';
    private const WEIGHTING_FILE_PATH = __DIR__.'/../../Resources/Vulnerability/resolver_weighting.csv';

    private const COUNT_BY_HOUSEHOLD_TEST_VALUE = 2;


    /**
     * @var Resolver
     */
    private $resolver;


    /**
     * @throws CsvParserException
     */
    protected function setUp(): void
    {
        $beneficiaryRepositoryMock = $this->createMock(BeneficiaryRepository::class);

        $beneficiaryRepositoryMock->expects($this->any())
            ->method('countByHousehold')
            ->willReturn(self::COUNT_BY_HOUSEHOLD_TEST_VALUE);

        $this->resolver = new Resolver(self::WEIGHTING_FILE_PATH, self::SCORING_FILE_PATH, $beneficiaryRepositoryMock);
    }


    public function testGenderOfHouseholdHead()
    {
        $household = new Household();

        $beneficiary = new Beneficiary();
        $beneficiary->getPerson()->setGender(Person::GENDER_MALE);
        $beneficiary->setStatus(true);

        $household->getBeneficiaries()->add($beneficiary);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(2, $protocol->getCategoryScore(CategoryEnum::HHH_GENDER));
    }


    public function testVulnerabilityHeadOfHouseholdVeryVulnerable()
    {
        $household = new Household();

        $beneficiary = new Beneficiary();
        $beneficiary->setStatus(true);

        $beneficiary->getPerson()->setDateOfBirth(new DateTime('-7 year'));

        $criteriaPregnant = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_PREGNANT);
        $criteriaLactating = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_LACTATING);
        $criteriaDisabled = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_DISABLED);
        $criteriaChronicallyIll = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL);

        $beneficiary->getVulnerabilityCriteria()->add($criteriaDisabled);
        $beneficiary->getVulnerabilityCriteria()->add($criteriaPregnant);
        $beneficiary->getVulnerabilityCriteria()->add($criteriaLactating);
        $beneficiary->getVulnerabilityCriteria()->add($criteriaChronicallyIll);

        $household->getBeneficiaries()->add($beneficiary);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(14, $protocol->getCategoryScore(CategoryEnum::HHH_VULNERABILITY));
    }


    public function testVulnerabilityOfHouseholdMembers()
    {
        $household = new Household();

        $head = new Beneficiary();
        $head->setStatus(true);

        $household->getBeneficiaries()->add($head);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::HHM_VULNERABILITY));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(4));
        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(70));

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(9, $protocol->getCategoryScore(CategoryEnum::HHM_VULNERABILITY));

        $criteriaPregnant = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_PREGNANT);
        $criteriaLactating = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_LACTATING);
        $criteriaDisabled = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_DISABLED);
        $criteriaChronicallyIll = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL);

        $vulnerableMember = new Beneficiary();
        $vulnerableMember->setStatus(false);

        $vulnerableMember->getVulnerabilityCriteria()->add($criteriaDisabled);
        $vulnerableMember->getVulnerabilityCriteria()->add($criteriaPregnant);
        $vulnerableMember->getVulnerabilityCriteria()->add($criteriaLactating);
        $vulnerableMember->getVulnerabilityCriteria()->add($criteriaChronicallyIll);

        $household->getBeneficiaries()->add($vulnerableMember);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(20, $protocol->getCategoryScore(CategoryEnum::HHM_VULNERABILITY));
    }


    public function testVulnerabilityHeadOfHouseholdNoVulnerability()
    {
        $household = new Household();

        $beneficiary = new Beneficiary();
        $beneficiary->setStatus(true);

        $household->getBeneficiaries()->add($beneficiary);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::HHH_VULNERABILITY));
    }


    public function testShelter()
    {
        $household = new Household();
        $household->setShelterStatus(HouseholdShelterStatuses::getKey(HouseholdShelterStatuses::TENT)); //tent

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::SHELTER));


        $household->setShelterStatus(null);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(0, $protocol->getCategoryScore(CategoryEnum::SHELTER));


        $household->setShelterStatus(7);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);

        $this->assertEquals(7, $protocol->getCategoryScore(CategoryEnum::SHELTER));
    }

    public function incomePerHouseholdMemberDataProvider()
    {
        return [
            'high vulnerability' => [1, 5000],
            'moderate vulnerability' => [2, 30000],
            'low vulnerability' => [5, 90000],
        ];
    }


    /**
     * @param int $expected
     * @param int $income
     *
     * @throws CsvParserException
     * @dataProvider incomePerHouseholdMemberDataProvider
     */
    public function testIncomePerHouseholdMember(int $expected, int $income)
    {
        $household = new Household();

        $household->setHouseholdIncome($income);
        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expected, $protocol->getCategoryScore(CategoryEnum::INCOME_HHM));
    }


    public function incomeSpentOnFoodDataProvider()
    {
        return [
            'null values' => [null, null, 0],
            'zero values' => [0, 0, 0],
            'low vulnerability' => [100, 1000, 1],
            'high vulnerability' => [800, 1000, 4],
        ];
    }


    /**
     * @param int|null $incomeSpentOnFood
     * @param int|null $householdIncome
     * @param int      $expectedScore
     *
     * @throws CsvParserException
     *
     * @dataProvider incomeSpentOnFoodDataProvider
     */
    public function testIncomeSpentOnfFood(?int $incomeSpentOnFood, ?int $householdIncome, int $expectedScore)
    {
        $household = new Household();

        $household->setIncomeSpentOnFood($incomeSpentOnFood);
        $household->setHouseholdIncome($householdIncome);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expectedScore, $protocol->getCategoryScore(CategoryEnum::INCOME_FOOD));
    }


    public function productiveAssetsDataProvider()
    {
        return [
            '0 assets' => [[], 0],
            '1 asset' => [[0], 1],
            '2 assets' => [[0, 1], 2],
            '6 assets' => [[0, 1, 2, 3, 4, 5, 6], 5]
        ];
    }


    /**
     * @param array $assets
     * @param int   $expectedScore
     *
     * @throws CsvParserException
     *
     * @dataProvider productiveAssetsDataProvider
     */
    public function testProductiveAssets(array $assets, int $expectedScore)
    {
        $household = new Household();

        $household->setAssets($assets);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expectedScore, $protocol->getCategoryScore(CategoryEnum::ASSETS));
    }


    public function CSIDataProvider()
    {
        return [
            'null value' => [null, 0],
            'high CSI' => [50, 4],
            'mid CSI' => [25, 2],
            'low CSI' => [5, 1],
        ];
    }


    /**
     * @param int|null $csiValue
     * @param int      $expectedScore
     *
     * @throws CsvParserException
     *
     * @dataProvider CSIDataProvider
     */
    public function testCSI(?int $csiValue, int $expectedScore)
    {
        $household = new Household();
        $household->setCopingStrategiesIndex($csiValue);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expectedScore, $protocol->getCategoryScore(CategoryEnum::CSI));
    }


    public function FCSDataProvider()
    {
        return [
            'null values' => [null, 0],
            'high FCS' => [40, 3],
            'med FCS' => [25, 2],
            'low FCS' => [5, 1],
        ];
    }


    /**
     * @param int|null $fcsValue
     * @param int      $expectedScore
     *
     * @throws CsvParserException
     *
     * @dataProvider FCSDataProvider
     */
    public function testFCS(?int $fcsValue, int $expectedScore)
    {
        $household = new Household();
        $household->setFoodConsumptionScore($fcsValue);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expectedScore, $protocol->getCategoryScore(CategoryEnum::FCS));
    }


    public function debtDataProvider()
    {
        return [
            'null values' => [null, 0],
            'extreme debt' => [5000, 5],
            'med debt' => [2500, 3],
            'low debt' => [500, 1]
        ];
    }


    /**
     * @param int|null $debt
     * @param int      $expectedScore
     *
     * @throws CsvParserException
     *
     * @dataProvider debtDataProvider
     */
    public function testDebt(?int $debt, int $expectedScore)
    {
        $household = new Household();
        $household->setDebtLevel($debt);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals($expectedScore, $protocol->getCategoryScore(CategoryEnum::DEBT));
    }


    public function testAssistanceProvided()
    {
       /* $modalityType = new ModalityType();
        $modalityType->setName('Shelter tool kit');

        $distributionData = new DistributionData();
        $distributionData->setDateDistribution(new DateTime('now -1 month'));

        $commodity = new Commodity();
        $commodity->setModalityType($modalityType);
        $commodity->setDistributionData($distributionData);

        $assistanceBeneficiary = new AssistanceBeneficiary();
        $assistanceBeneficiary->setDistributionData($distributionData);

        $household = new Household();
        $household->getDistributionBeneficiaries()->add($assistanceBeneficiary);
            */

        $this->markTestSkipped('assistanceProvided condition needs to be implemented first');
    }


    public function testDependencyRatio()
    {
        $household = new Household;

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(0, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(30));

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(7));
        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(7));

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(2, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(70));

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(3, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $vulnerabilityDisabled = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_DISABLED);
        $disabledAdult = $this->createBeneficiaryByAge(30);
        $disabledAdult->getVulnerabilityCriteria()->add($vulnerabilityDisabled);

        $household->getBeneficiaries()->add($disabledAdult);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(4, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(30));
        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(30));
        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(2, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(30));
        $household->getBeneficiaries()->add($this->createBeneficiaryByAge(30));
        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));

        $vulnerabilityChronicallyIll = new VulnerabilityCriterion(VulnerabilityCriterion::CRITERION_CHRONICALLY_ILL);
        $chronicallyIllAdult = $this->createBeneficiaryByAge(30);
        $chronicallyIllAdult->getVulnerabilityCriteria()->add($vulnerabilityChronicallyIll);

        $household->getBeneficiaries()->add($chronicallyIllAdult);

        $protocol = $this->resolver->compute($household, self::TEST_COUNTRY, self::TEST_SECTOR);
        $this->assertEquals(1, $protocol->getCategoryScore(CategoryEnum::DEPENDENCY_RATIO));
    }


    private function createBeneficiaryByAge(int $age): Beneficiary
    {
        $beneficiary = new Beneficiary();
        $beneficiary->getPerson()->setDateOfBirth(new DateTime("now -$age years"));
        $beneficiary->setStatus(false);

        return $beneficiary;
    }
}
