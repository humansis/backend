<?php

namespace Tests\Model\Vulnerability;

use Exception\CsvParserException;
use Exception\ScoringCsvException;
use Model\Vulnerability\ConditionEnum;
use Model\Vulnerability\ScoringParser;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ScoringParserTest extends KernelTestCase
{
    private const RESOURCE_PATH = __DIR__.'/../../Resources/Vulnerability/';

    /** @var ScoringParser */
    private $scoringParser;

    public function setUp(): void
    {
        $this->scoringParser = new ScoringParser();
    }

    public function testFileNotExists()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessageMatches('#File not found (.*)#');

        $this->scoringParser->parse(self::RESOURCE_PATH.'non_existing_path');
    }

    public function testCsvBadStructure()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('CSV file has wrong structure');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_bad_format.csv');
    }

    public function testUnknownCondition()
    {
        $this->expectException(ScoringCsvException::class);
        $this->expectExceptionMessage('Unknown condition');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_unknown_condition.csv');
    }

    public function testMissingScoreValue()
    {
        $this->expectException(ScoringCsvException::class);
        $this->expectExceptionMessage('Missing score value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_score_value.csv');
    }

    public function testBadFormatScoreValue()
    {
        $this->expectException(ScoringCsvException::class);
        $this->expectExceptionMessage('Bad format score value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_bad_format_score_value.csv');
    }

    public function testMissingConditionValue()
    {
        $this->expectException(ScoringCsvException::class);
        $this->expectExceptionMessage('Missing condition value');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_condition_value.csv');
    }

    public function testMissingRow()
    {
        $this->expectException(ScoringCsvException::class);
        $this->expectExceptionMessage('Missing score');

        $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_missing_row.csv');
    }


    public function correctParseScoreDataProvider()
    {
        return [
            [4, ConditionEnum::HHH_GENDER_FEMALE],
            [3, ConditionEnum::SHELTER_MAKESHIFT],
            [0, ConditionEnum::RESIDENCE_OWENERSHIP_OWNED],
            [3, ConditionEnum::INCOME_FOOD_0],
        ];
    }


    /**
     * @param int    $expected
     * @param string $condition
     *
     * @throws CsvParserException
     *
     * @dataProvider correctParseScoreDataProvider
     */
    public function testCorrectParseScore(int $expected, string $condition)
    {
        $scoring = $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_correct.csv');

        $this->assertEquals($expected, $scoring->getScore($condition));

        $this->assertEquals(0, $scoring->getConditionValue(ConditionEnum::INCOME_HHM_VERY_HIGH));
        $this->assertEquals(100000, $scoring->getConditionValue(ConditionEnum::DEBT_EXTREME));
    }


    public function correctParseConditionValueDataProvider()
    {
        return [
            [0, ConditionEnum::INCOME_HHM_VERY_HIGH],
            [100000, ConditionEnum::DEBT_EXTREME],
        ];
    }


    /**
     * @param int    $expected
     * @param string $condition
     *
     * @throws CsvParserException
     *
     * @dataProvider correctParseConditionValueDataProvider
     */
    public function testCorrectParseConditionValue(int $expected, string $condition)
    {
        $scoring = $this->scoringParser->parse(self::RESOURCE_PATH.'scoring_correct.csv');

        $this->assertEquals($expected, $scoring->getConditionValue($condition));
    }

    public function correctParseDataProvider()
    {
        return [
            'Syria' => ['SYR'],
            'Default' => ['DEFAULT'],
        ];
    }

    /**
     * @param string $country
     *
     * @throws CsvParserException
     *
     * @dataProvider correctParseDataProvider
     * @doesNotPerformAssertions
     */
    public function testCorrectParse(string $country)
    {
        self::bootKernel();
        $scoringFileTemplate = self::$kernel->getContainer()->getParameter('vulnerability_scoringFileTemplate');

        $scoringFilePath = str_replace('<<COUNTRY>>', $country, $scoringFileTemplate);

        $this->scoringParser->parse($scoringFilePath);
    }
}
