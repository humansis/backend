<?php

namespace Tests\Model\Vulnerability;

use Exception\CsvParserException;
use Exception\WeightingCsvException;
use Model\Vulnerability\CategoryEnum;
use Model\Vulnerability\WeightingParser;
use DBAL\SectorEnum;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class WeightingParserTest extends KernelTestCase
{
    private const RESOURCE_PATH = __DIR__ . '/../../Resources/Vulnerability/';

    /** @var WeightingParser */
    private $weightingParser;

    public function setUp(): void
    {
        $this->weightingParser = new WeightingParser();
    }

    public function testFileNotExists()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessageMatches('#File not found (.*)#');

        $this->weightingParser->parse(self::RESOURCE_PATH . 'non_existing_path');
    }

    public function testCsvBadStructure()
    {
        $this->expectException(CsvParserException::class);
        $this->expectExceptionMessage('CSV file has wrong structure');

        $this->weightingParser->parse(self::RESOURCE_PATH . 'weighting_bad_structure.csv');
    }

    public function testBadCountryFormat()
    {
        $this->expectException(WeightingCsvException::class);
        $this->expectExceptionMessage('Bad country format');

        $this->weightingParser->parse(self::RESOURCE_PATH . 'weighting_bad_country_format.csv');
    }

    public function testUnknownSector()
    {
        $this->expectException(WeightingCsvException::class);
        $this->expectExceptionMessage('Unknown sector');

        $this->weightingParser->parse(self::RESOURCE_PATH . 'weighting_unknown_sector.csv');
    }

    public function testIncompleteRow()
    {
        $this->expectException(WeightingCsvException::class);
        $this->expectExceptionMessage('Missing value');

        $this->weightingParser->parse(self::RESOURCE_PATH . 'weighting_row_incomplete.csv');
    }

    public function testCorrectValues()
    {
        $weightings = $this->weightingParser->parse(self::RESOURCE_PATH . 'weighting_correct.csv');
        $this->assertEquals(5, $weightings->get('SYR', SectorEnum::LIVELIHOODS, CategoryEnum::HHH_GENDER));
        $this->assertEquals(3, $weightings->get('SYR', SectorEnum::DRR_RESILIENCE, CategoryEnum::HHH_VULNERABILITY));
        $this->assertEquals(1, $weightings->get('SYR', SectorEnum::FOOD_SECURITY, CategoryEnum::DEPENDENCY_RATIO));
        $this->assertEquals(6, $weightings->get('UKR', SectorEnum::LIVELIHOODS, CategoryEnum::DISPLACEMENT_STATUS));
        $this->assertEquals(null, $weightings->get('UKR', SectorEnum::LIVELIHOODS, 'xxx'));
    }

    /**
     * @throws CsvParserException
     *
     * @doesNotPerformAssertions
     */
    public function testCorrectParse()
    {
        self::bootKernel();
        $weightingFilePath = self::$kernel->getContainer()->getParameter('vulnerability_weightingFile');

        $this->weightingParser->parse($weightingFilePath);
    }
}
